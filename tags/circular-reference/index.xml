<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>circular reference on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/circular-reference/</link><description>Recent content in circular reference on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 28 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/circular-reference/index.xml" rel="self" type="application/rss+xml"/><item><title>타입스크립트와 순환 의존성</title><link>https://if1live.github.io/posts/typescript-and-circular-dependency/</link><pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/typescript-and-circular-dependency/</guid><description>타입스크립트와 순환 의존성 circular dependency(순환 의존성, circular reference, 순환 참조)는 대부분의 언어에서 발생시킬 수 있는 문제이다. C 에서도 circular dependency 문제가 있다. C 에서는 전방선언 같은 수단을 쓰지 않으면 컴파일이 되지 않기 때문에 문제를 쉽게 찾을수 있다.
타입스크립트 역시 순환 의존성 문제가 발생할 수 있다. 하지만 타입스크립트에서의 순환 의존성 문제는 C와는 조금 다르다.
undefined 순환 의존성을 구현한 간단한 예제이다.
const-a.ts
import { b } from './const-b'; console.log({ b }); export const a: number = b + 1; const-b.</description></item></channel></rss>