<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>exception on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/exception/</link><description>Recent content in exception on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 15 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/exception/index.xml" rel="self" type="application/rss+xml"/><item><title>타입스크립트 + Promise + async/await + Error = ???</title><link>https://if1live.github.io/posts/typescript-pitfall-of-promise-and-error/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/typescript-pitfall-of-promise-and-error/</guid><description>개요 타입스크립트는 좋은 언어다. 자바스크립트 짜듯이 코드를 짜도 되니까 쉽게 적응할 수 있다. 자바스크립트에서 실수하기 쉬운 타입 관련 문제를 타입스크립트 컴파일러를 통해서 잡아낼 수 있다.
Promise는 좋은 기능이다. Promise 이전에는 자바스크립트에서 비동기 프로그래밍을 하면 콜백 지옥을 피할 수 없었다. then/catch를 사용해서 Promise를 이어붙이면 콜백시절보다는 멀쩡한 코드가 나온다.
Promise에 async/await까지 붙이면 더 좋아진다. then/catch 쓸때는 비동기 프로그래밍에 대한 생각을 해야되지만 async/await를 쓰면 동기처럼 생각해도 된다. 대충 짜도 대충 돌아가주니까 고민하게 줄어들고 생산성이 올라간다.</description></item><item><title>올바르지 않은 값을 정수로 변환하기 - 파이썬 vs 루비</title><link>https://if1live.github.io/posts/make-int-from-invalid-value-python-and-ruby/</link><pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/make-int-from-invalid-value-python-and-ruby/</guid><description>올바르지 않은 값을 정수로 바꾸는 일은 웹을 포함한 여러가지 개발에서 자주하는 작업 중 하나이다. 예를 들어서 /articles/?id={int} 를 구현한 서버가 있다고 가정하자. /articles/?id=1234와 같이 id에 정수 문자열이 들어갈수도 있다. 하지만 /articles/?id=test와 같이 숫자가 아닌 문자열이 들어갈수도 있고 /articles/처럼 id가 없을수도 있다. 개발자는 이런 예외 상황을 잘 처리해야된다.
이 글에서는 파이썬과 루비에서 문자열을 숫자로 변환할때의 차이점을 간단하게 정리했다.
String to int Success &amp;quot;123&amp;quot;과 같이 딱봐도 정수처럼 보이는 문자열을 정수로 바꿔보았다.
print(int(&amp;quot;123&amp;quot;)) $ python str_to_int_success.</description></item><item><title>Interrupt and Exceptions</title><link>https://if1live.github.io/posts/sytem-prog-study-interrupt-and-exceptions/</link><pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/sytem-prog-study-interrupt-and-exceptions/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다.
Interrupt and Exceptions Interrupt vs Exception Interrupt Asynchronous Interrupt 외부장치 -&amp;gt; CPU 외부 장치 : keyboard, etc CPU : processor&amp;rsquo;s interrupt pin으로 입력 받기 가능 펌웨어와 CPU의 플랫폼/언어/환경이 달라도 통신가능한 인터페이스 Exception Synchronous Interrupt CPU에서 명령어 실행도중 발생 ex: 0으로 나누기 Interrupt Signal Interrupt Signal 받으면 하는 행동 CPU는 기존 흐름 멈추고 interrupt handler로 jump 현재 program context를 kernel stack에 저장(eip, cs registers) PC(program counter)에는 인터럽트 관련 주소 대입 Interrupt handling과 Process switching의 차이 Interrupt handler는 프로세스 아님 현재 프로세스가 작동중인 상태에서 커널 흐름이 바뀜 프로세스보다 가볍다 interrupt handling에는 mode switching만 필요하니까 프로세스는 기존 유지 Interrupt Handling 요구 사항 커널 효율성(kernel Effectiveness) Top half : 즉시 처리 해야하는 것.</description></item></channel></rss>