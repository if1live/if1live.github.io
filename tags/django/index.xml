<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>django on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/django/</link><description>Recent content in django on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 13 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/django/index.xml" rel="self" type="application/rss+xml"/><item><title>django를 관리툴로 쓰자</title><link>https://if1live.github.io/posts/use-django-as-admin-tool/</link><pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/use-django-as-admin-tool/</guid><description>개요 서비스를 개발하다보면 어떤 식으로든 어드민 툴이 필요해진다. 간단한 게시판을 만든다고 생각하자. 관리자의 업무중에는 게시판의 스팸글을 지우는게 있을 것이다. 스팸글 몇 개는 SQL query로 대응할수 있을 것이다. 그러던 어느날, 쿼리에 게시글 id를 잘못 넣어서 의도하지 않은 게시글을 지워버릴지도 모르는 일이다. 또는 게시판 관리하는 업무를 다른 사람한테 넘기고 싶은데 SQL을 아는 사람만 업무를 이어받을 수 있는 상황이 될지 모른다. 어드민 툴을 만들었으면 마우스 클릭 하나로 글을 지울 수 있었을것이다. 그렇다면 쿼리 입력하다 실수할 가능성도 낮아지고 다른 사람한테 일을 넘기도 쉽다.</description></item><item><title>importd - Django as a micro-framework</title><link>https://if1live.github.io/posts/introduce-importd/</link><pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/introduce-importd/</guid><description>What is importd? importd (importd-repo) 는 Amit Upadhyay 님이 django micro framework이다. 우리나라에는 거의 알려져있지 않은데 @cedar101 님의 소개로 알게 되어서 사용해봤다. 직접 쓰면서 느낀 importd의 특징을 정리해봤다.
micro-framework importd Hello World
#!/usr/bin/env python from importd import d @d(&amp;quot;/&amp;quot;) def index(request): return d.HttpResponse(&amp;quot;Hello World&amp;quot;) if __name__ == &amp;quot;__main__&amp;quot;: d.main() flask Hello World
#!/usr/bin/env python from flask import Flask app = Flask(__name__) @app.route(&amp;quot;/&amp;quot;) def hello(): return &amp;quot;Hello World!&amp;quot; if __name__ == &amp;quot;__main__&amp;quot;: app.</description></item><item><title>Django용 적절한 라이브러리 소개</title><link>https://if1live.github.io/posts/good-django-library/</link><pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/good-django-library/</guid><description>2년 전, 신규 웹 프로젝트를 django로 시작했지만 django의 몇가지 문제 때문에 flask로 갈아탔다. 프로젝트 시작한지 얼마되지 않은 시점이어서 코드가 별로 없었기 때문에 프레임웍을 바꾸는것이 별 부담이 되지 않았고 django에서 어떻게든 문제를 해결하려고 삽질할 수도 있었겠지만 flask로 선택하면 바로 해결되기 때문에 삽질하기 귀찮아서 django를 버렸다.
지금 시점에서 django와 flask 중 하나를 선택하라고 어떻게 할까? 지금은 django로 여러가지 삽질을 해서 과거에 해결하지 못했던 문제를 해결할 수 있는 라이브러리를 알고 있다. 그래서 이번 기회에 내가 알고있는 django를 flask만큼 좋게 만드는 몇가지 라이브러리를 소개한다.</description></item><item><title>Django Project 구조 예제</title><link>https://if1live.github.io/posts/django-project-structure/</link><pubDate>Wed, 30 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/django-project-structure/</guid><description>최근에 Django로 코딩한적이 있다. django는 기본적으로 프로젝트 트리에 적절한 제약이 걸려있기 떄문에 굳이 신경안쓰고 django 가이드라인에서 제공하는대로 짜도 별 문제는 없을것이다. django 에서 제시하는 가이드라인에 일부 참고자료를 덧붙여서 내 나름대로 사용했던 프로젝트 구조를 정리해봤다. 일단 목표한 요구사항은 다음과 같다.
외부라이브러리를 막 집어넣어도 문제가 생기지 않을것 템플릿을 한곳에 모아서 관리하기. 템플릿 파일은 개발자가 아니라 디자이너가 편집하게 될 파일이니까 따로 모아놓는쪽이 관리하기 편할것이다. Django Project Structure ROOT ├── apps │ ├── __init__.py │ ├── common │ │ ├── __init__.</description></item></channel></rss>