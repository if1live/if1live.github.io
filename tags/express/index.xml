<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>express on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/express/</link><description>Recent content in express on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 11 Jul 2020 00:00:00 +0900</lastBuildDate><atom:link href="https://if1live.github.io/tags/express/index.xml" rel="self" type="application/rss+xml"/><item><title>express에서 콘솔로 찍은 로그를 HTTP 응답에 붙이기</title><link>https://if1live.github.io/posts/express-attach-console-log-to-response/</link><pubDate>Sat, 11 Jul 2020 00:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/express-attach-console-log-to-response/</guid><description>HTTP 응답에 콘솔 로그 붙인 이유 간단한 express 서버가 있다고 치자.
const express = require('express'); const delay = require('delay'); const app = express(); app.get('/', async (req, res) =&amp;gt; { const data = await execute(req.query || {}); res.json(data); }); async function execute(input) { const id = input.id; console.info(`before delay: ${id}`); await delay(100); console.warn(`after delay: ${id}`); return { id }; } const port = 3000; app.listen(port, () =&amp;gt; console.log(`listen: 127.0.0.1:${port}`)); http://127.0.0.1:3000/?id=1로 접속하면 아래와 같은 JSON을 응답으로 받는다.</description></item><item><title>express에서 에러로 HTTP status code 통제하기</title><link>https://if1live.github.io/posts/express-error-and-http-status-code/</link><pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/express-error-and-http-status-code/</guid><description>throw new Error(&amp;lsquo;BadRequest&amp;rsquo;) 자바스크립트에서 Error를 던져서 에러 처리하는 것은 쉽고 간단한 방법이다. express에서도 마찬가지이다. Error를 던지면 200 OK가 아닌 500 Internal Server Error를 발생시킬 수 있다.
const express = require('express'); const app = express(); app.get('/', (req, res) =&amp;gt; { throw new Error('BadRequest'); }); app.listen(3000, () =&amp;gt; { console.log('listen'); }); 요즘 세상에 에러났다고 무조건 500을 던지면 멍청한 REST API처럼 보인다. 상황에 맞춰서 4xx, 5xx를 던져야한다. 500 아닌 상태 코드를 보내고 싶으면 res.</description></item><item><title>타입 안전한 express 앱 구현하기</title><link>https://if1live.github.io/posts/make-typesafe-express-app/</link><pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/make-typesafe-express-app/</guid><description>개요 import express from 'express'; const app = express(); app.get('/sum', (req, res) =&amp;gt; { const a = parseInt(req.query.a, 10); const b = parseInt(req.query.b, 10); if (isNaN(a)) { throw new Error('not a number'); } if (isNaN(b)) { throw new Error('not a number'); } const result = a + b; res.json({ result }); }); const port = 5000; app.listen(port, () =&amp;gt; console.log(`running 127.0.0.1:${port}`)); 위의 코드는 express, 타입스크립트를 사용해서 만든 간단한 서버이다. 서버는 간단하고 대응되는 클라를 짜는것도 간단한 일이다.</description></item></channel></rss>