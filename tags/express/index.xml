<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>express on if1live space</title><link>https://if1live.github.io/tags/express/</link><description>Recent content in express on if1live space</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 11 Jul 2020 00:00:00 +0900</lastBuildDate><atom:link href="https://if1live.github.io/tags/express/index.xml" rel="self" type="application/rss+xml"/><item><title>express에서 콘솔로 찍은 로그를 HTTP 응답에 붙이기</title><link>https://if1live.github.io/posts/express-attach-console-log-to-response/</link><pubDate>Sat, 11 Jul 2020 00:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/express-attach-console-log-to-response/</guid><description>HTTP 응답에 콘솔 로그 붙인 이유 간단한 express 서버가 있다고 치자. const express = require(&amp;#39;express&amp;#39;); const delay = require(&amp;#39;delay&amp;#39;); const app = express(); app.get(&amp;#39;/&amp;#39;, async (req, res) =&amp;gt; { const data = await execute(req.query || {}); res.json(data); }); async function execute(input) { const id = input.id; console.info(`before delay: ${id}`); await delay(100); console.warn(`after delay: ${id}`); return {</description></item><item><title>express에서 에러로 HTTP status code 통제하기</title><link>https://if1live.github.io/posts/express-error-and-http-status-code/</link><pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/express-error-and-http-status-code/</guid><description>throw new Error(&amp;lsquo;BadRequest&amp;rsquo;) 자바스크립트에서 Error를 던져서 에러 처리하는 것은 쉽고 간단한 방법이다. express에서도 마찬가지이다. Error를 던지면 200 OK가 아닌</description></item><item><title>타입 안전한 express 앱 구현하기</title><link>https://if1live.github.io/posts/make-typesafe-express-app/</link><pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/make-typesafe-express-app/</guid><description>개요 import express from &amp;#39;express&amp;#39;; const app = express(); app.get(&amp;#39;/sum&amp;#39;, (req, res) =&amp;gt; { const a = parseInt(req.query.a, 10); const b = parseInt(req.query.b, 10); if (isNaN(a)) { throw new Error(&amp;#39;not a number&amp;#39;); } if (isNaN(b)) { throw new Error(&amp;#39;not a number&amp;#39;); } const result = a &amp;#43; b; res.json({ result }); }); const port = 5000; app.listen(port, () =&amp;gt; console.log(`running 127.0.0.1:${port}`)); 위의 코드는 express, 타입</description></item></channel></rss>