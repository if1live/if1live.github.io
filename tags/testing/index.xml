<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>testing on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/testing/</link><description>Recent content in testing on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Wed, 03 Jul 2019 01:00:00 +0900</lastBuildDate><atom:link href="https://if1live.github.io/tags/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Jest 탈출기 - 타입스크립트 + Mocha</title><link>https://if1live.github.io/posts/escape-from-jest-mocha-with-typescript/</link><pubDate>Wed, 03 Jul 2019 01:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/escape-from-jest-mocha-with-typescript/</guid><description>개요 Jest 탈출기 - Jest는 느리다, Jest 탈출기 - Mocha를 쓰자에서는 자바스크립트 기준으로 예제를 작성했다. 하지만 실제로 내가 쓰는 언어는 타입스크립트이다.
이 글에서는 타입스크립트에서 mocha 굴리는 방법을 다룬다.
목표: 타입스크립트로 작성된 테스트 돌리기 아래의 테스트는 타입스크립트로 작성되었다. 이것을 mocha로 돌리는게 목표이다.
import { Sample } from '@src/sample'; test('ok', () =&amp;gt; { const x = new Sample(); expect(x.foo()).toBe(1); }); @src는 tsconfig.json에 설정한 paths이다. 타입스크립트에서 절대경로 쓰기에서 다뤘다. 여기에서는 다루지 않는다.
test()를 mocha에서도 쓸 수 있게 만드는 방법은 Jest 탈출기 - Mocha를 쓰자에서 다뤘다.</description></item><item><title>Jest 탈출기 - Mocha를 쓰자</title><link>https://if1live.github.io/posts/escape-from-jest-use-mocha/</link><pubDate>Tue, 02 Jul 2019 01:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/escape-from-jest-use-mocha/</guid><description>개요 이전에 Jest 탈출기 - Jest는 느리다를 썼다. 이를 통해 jest를 탈출해서 mocha로 넘어가기로 마음먹었다.
jest는 느린거 빼곤 문제가 없다. CI에서는 성능은 심각한 문제가 아니니 jest를 써도 된다. CI에서는 jest의 장점인 테스트 간의 고립을 유지하고 싶다. 개발 환경에서는 mocha의 장점인 빠른 이터레이션을 얻고 싶다.
근데 이미 테스트 코드를 jest 기준으로 작성했다. jest와 mocha는 미묘하게 달라서 그냥은 안돌아간다. 그래서 jest 기준으로 작성된 테스트 코드가 mocha로도 잘 돌아가도록 mocha를 손댔다.
목포: jest 테스트 코드를 mocha로 돌리기 let counter = 0; function print(message) { counter += 1; console.</description></item><item><title>Jest 탈출기 - Jest는 느리다</title><link>https://if1live.github.io/posts/escape-from-jest-jest-is-slow/</link><pubDate>Mon, 01 Jul 2019 01:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/escape-from-jest-jest-is-slow/</guid><description>개요 요새 작업하는 프로젝트에서 jest를 사용해서 유닛테스트를 돌린다. 프로젝트가 진행될수록 테스트가 점점 느려지더니 이제 유닛 테스트 한번 돌리는데 1분이 걸린다. 라이젠 붙은 좋은 컴퓨터에서 CI 돌리는데 여기에서도 30초나 걸린다.
근데 같은 테스트 코드를 mocha로 돌리면 몇초 안걸리더라? jest는 mocha와 달리 병렬적으로 테스트가 돌아가니 훨씬 빨라야 하지 않나? 근데 몇배가 느리다고?
왜 jest가 mocha보다 느리게 테스트가 굴러가는지 뜯어봤다.
속도 비교 const a1 = Date.now(); var express = require('express'); const a2 = Date.</description></item><item><title>완벽한 싱글턴을 찾아서 - 테스트</title><link>https://if1live.github.io/posts/singleton-test/</link><pubDate>Tue, 18 Jun 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/singleton-test/</guid><description>이전에 사람들이 많이 사용하는 방식의 싱글턴을 까는 글을 쓰고 그것을 해결책을 정리했었다.(사실은 복붙에 더 가깝지만&amp;hellip;) 최근에 조금 더 생각해보니 그거보다 더 좋은 방법(특히 테스트측면에서)이 생각나서 똑같은 주제를 재탕하기로 했다.
테스트에서 싱글턴의 뭐가 문제인가? 전역변수 기반의 싱글턴이 사고치는 경우를 준비하자.
FileSystem이라는 싱글턴 클래스가 존재한다. 싱글턴으로 사용하는 전역변수의 이름은 gFileSystem이다. 그리고 gFileSystem을 기반으로 구현된 PackageManager라는 클래스가 있다. PackageManager에는 foo(), bar()라는 함수가 존재한다.
위의 상황에 대응하는 유닛테스트를 다음과 같이 작성했다.
class PackageManagerTest : public ::testing::Test { protected: virtual void SetUp() { gFileSystem.</description></item></channel></rss>