<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/python/</link><description>Recent content in python on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 01 Mar 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>버그 삽질기 - 파이썬으로 구현한 API 서버 루비로 포팅하기</title><link>https://if1live.github.io/posts/http-request-params-trap-python-and-ruby/</link><pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/http-request-params-trap-python-and-ruby/</guid><description>간단한 명언 API 서버를 만들보자. 필요한 기능은 다음과 같다.
명언 목록을 데이터로 분리한다. 나중에 목록을 쉽게 갱신할수 있어야한다. 서버에 접속하면 명언중 하나를 임의로 골라서 보여준다. Query String을 이용해서 특정 명언을 골라서 볼수 있어야 한다. (결정론적으로 작동해야 테스트하기 쉬우니까) Query String이 올바르지 않으면 임의로 하나를 보여준다. 다은은 간단한 작성된 명언 목록이다. 한줄에 하나의 명언을 적었다.
가정이 무너지고 사회가 무너지고 안 되겠소 쏩시다 트위터는 인생의 낭비 비둘기야 먹자 애니메이션 캐릭터에 꼴린다면 정신병원에 가보세요 인간의 욕심은 끝이 없고 같은 실수를 반복한다 마이크로 프레임워크 중 하나인 flask로 간단한 API 서버를 만들었다.</description></item><item><title>존재하지 않는 키로 테이블에 접근하면?</title><link>https://if1live.github.io/posts/if-key-does-not-exist-then/</link><pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/if-key-does-not-exist-then/</guid><description>존재하지 않은 키로 테이블에 접근했을때 각각의 언어는 어떤 식으로 행동할까? 올바르지 않은 인덱스로 리스트에 접근하면 각각의 언어는 어떤 식으로 행동할까? 파이썬, 루비, C++를 통해서 알아보자.
파이썬 파이썬은 C와 달리 음수 인덱스를 지원한다. -len(array) ~ len(array)-1 까지는 올바른 인덱스이다. 음수 인덱스를 쓰면 배열을 뒤에서부터 접근할 수 있다.
만약 파이썬의 리스트에 허용 범위를 벗어난 인덱스로 접근하면 어떤 일이 벌어질까? 존재하지 않는 키로 파이썬의 사전에 접근하면 어떤 일이 벌어질까?
foo_list = [1, 2, 3] try: print(foo_list[100]) except Exception as ex: print(repr(ex)) foo_dict = {&amp;quot;foo&amp;quot;: 2, &amp;quot;bar&amp;quot;: 4} try: print(foo_dict[&amp;quot;spam&amp;quot;]) except Exception as ex: print(repr(ex)) $ python .</description></item><item><title>올바르지 않은 값을 정수로 변환하기 - 파이썬 vs 루비</title><link>https://if1live.github.io/posts/make-int-from-invalid-value-python-and-ruby/</link><pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/make-int-from-invalid-value-python-and-ruby/</guid><description>올바르지 않은 값을 정수로 바꾸는 일은 웹을 포함한 여러가지 개발에서 자주하는 작업 중 하나이다. 예를 들어서 /articles/?id={int} 를 구현한 서버가 있다고 가정하자. /articles/?id=1234와 같이 id에 정수 문자열이 들어갈수도 있다. 하지만 /articles/?id=test와 같이 숫자가 아닌 문자열이 들어갈수도 있고 /articles/처럼 id가 없을수도 있다. 개발자는 이런 예외 상황을 잘 처리해야된다.
이 글에서는 파이썬과 루비에서 문자열을 숫자로 변환할때의 차이점을 간단하게 정리했다.
String to int Success &amp;quot;123&amp;quot;과 같이 딱봐도 정수처럼 보이는 문자열을 정수로 바꿔보았다.
print(int(&amp;quot;123&amp;quot;)) $ python str_to_int_success.</description></item><item><title>삽질로 알아보는 파이썬과 루비의 기본 매개변수</title><link>https://if1live.github.io/posts/default-argument-python-and-ruby/</link><pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/default-argument-python-and-ruby/</guid><description>파이썬과 루비의 문법 차이로 인한 버그를 당한적은 자주 있었지만 글로 다룰 생각까진 (게을러서) 하지 않았다. 하지만 아래의 글을 읽고 파이썬와 루비의 차이로 인한 버그를 정리해보면 재밌을거라고 생각했다. 그래서 써보기로 했다.
루비와 파이썬에서 함수 호출과 함수 참조에 대한 차이
기본 매개변수를 이용해서 낚시를 해보자. (얼마나 낚일지는 모르지만) Default argument 를 남들이 기본 매개변수라고 번역하길래 기본 매개변수라고 적었지만 디폴트 매개변수, 기본 인자 등등으로도 불리는거같다. 용어를 하나로 합치려고 default argument 만을 사용하겠다.
문제1. 다음 코드의 실행 결과는?</description></item><item><title>예제로 보는 Python과 Ruby의 문법 차이 - Multiple Assignment</title><link>https://if1live.github.io/posts/multiple-assignment-python-and-ruby/</link><pubDate>Sun, 14 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/multiple-assignment-python-and-ruby/</guid><description>파이썬과 루비는 겉보기에는 비슷해보이면서 완전히 다르게 행동하는 문법이 있다. 그래서 파이썬을 생각하면서 루비 코드를 짜면 어처구니 없는 버그가 생긴다. 이런 일을 방지하고자 지금까지 당해본 파이썬과 루비의 문법 차이를 정리하려고 한다. 오늘은 Multiple Assignment이다. (여러 개의 변수에 값을 동시에 할당하기)
Python 2.x 변수 1개에 정수를 1개 할당하는 것부터 시작하자. 매우 기본적인 문법이다.
source: a = 1 a=1 변수 2개에 정수를 2개 할당하면 어떻게 될까? 1, 2 이라고 썻기때문에 값이 2개인 것처럼 보이지만 사실 파이썬에서는 (1, 2) 같이 튜플로 묶어서 처리한다.</description></item><item><title>파이썬 엑셀 쓰기 라이브러리 비교</title><link>https://if1live.github.io/posts/python-excel-library/</link><pubDate>Sun, 23 Feb 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/python-excel-library/</guid><description>subtitle: 무엇을 골라야 후회하지 않는가?
리눅스에서 굴러가는 파이썬 기반의 통계 도구를 만든적이 있다. 리눅스에서도 굴러가는 엑셀 라이브러리를 몇개 찾아봤고 직접 써본 다음에 정리했다. 찾아본 엑셀 라이브러리는 다음과 같다.
xlwt OpenPyXL XlsxWriter PyExcelerate 이중에서 내가 직접 사용해본것은 xlwt, OpenPyXL, XlsxWriter이다. (사용해본 순서로 적었다.)
supoort xlsx xls와 xlsx의 가장 큰 차이는 행, 열의 최대 갯수가 65535라는거다. 몇만건의 데이터를 다룰 가능성이 있다면 xlsx 지원하는 라이브러리를 사용해야 나중에 또 짜는 삽질은 안한다.
Library support xlsx xlwt x OpenPyXL o XlsxWriter o PyExcelerate o xlwt만 지원하지 않는다.</description></item><item><title>Python 2.x 한글 인코딩 관련 정리</title><link>https://if1live.github.io/posts/python-hangul/</link><pubDate>Sun, 03 Feb 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/python-hangul/</guid><description>개요 파이썬은 양놈이 만든 언어라서 한글을 쓸때 골치아프다 (아니, 한글만 골치아픈게 지옥의 언어 CJK(chiness, japanese, korean)를 포함한 멀티바이트 언어는 전부 그렇겠지). 영어만 사용하면 별로 신경쓸게 없지만 한글은 euc-kr, utf-8이 공존하지 않는가?
그냥 골치아픈것도 아니고 unicode와 조합되서도 골치아프다. unicode관련 부분의 경우, 최초부터 지원한게 아니라 파이썬 2.4(엿던가?)부터 지원이 추가되어서 문자열을 의미하는 타입이 str과 unicode가 존재해서 더 골치아프다. 이런 문제는 파이썬 3.X로 가면 거의 없어지지만(그 동네는 unicode로 통일됏다고하더라.) 외부 라이브러리라든가 기타 사정상 파이썬 2.</description></item><item><title>Flask Project 구조 예제</title><link>https://if1live.github.io/posts/flask-project-structure/</link><pubDate>Thu, 31 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/flask-project-structure/</guid><description>요즘에는 Flask를 주력으로 사용하고 있다. Flask는 가볍게 쓰는것을 목표로 설계된 라이브러리다 보니까 프로젝트 구조를 어떻게 잡을지에 대한 가이드라인조차 딱히 제시하지 않는다.(django에서는 프로젝트 트리를 미리 제시하기 떄문에 이런 고민을 굳이 깊게할 필요가 없다) 그래서 내가 요즘 사용하는 구조를 정리해봤다
Flask Project Structure ROOT ├── common │ ├── __init__.py │ ├── http.py │ ├── mobile.py │ ├── db.py │ ├── testlibs.py │ └── ... ├── like │ ├── __init__.py │ ├── controllers.py │ ├── models.</description></item><item><title>Django Project 구조 예제</title><link>https://if1live.github.io/posts/django-project-structure/</link><pubDate>Wed, 30 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/django-project-structure/</guid><description>최근에 Django로 코딩한적이 있다. django는 기본적으로 프로젝트 트리에 적절한 제약이 걸려있기 떄문에 굳이 신경안쓰고 django 가이드라인에서 제공하는대로 짜도 별 문제는 없을것이다. django 에서 제시하는 가이드라인에 일부 참고자료를 덧붙여서 내 나름대로 사용했던 프로젝트 구조를 정리해봤다. 일단 목표한 요구사항은 다음과 같다.
외부라이브러리를 막 집어넣어도 문제가 생기지 않을것 템플릿을 한곳에 모아서 관리하기. 템플릿 파일은 개발자가 아니라 디자이너가 편집하게 될 파일이니까 따로 모아놓는쪽이 관리하기 편할것이다. Django Project Structure ROOT ├── apps │ ├── __init__.py │ ├── common │ │ ├── __init__.</description></item></channel></rss>