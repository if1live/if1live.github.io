<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>build on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/build/</link><description>Recent content in build on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 12 Nov 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/build/index.xml" rel="self" type="application/rss+xml"/><item><title>유니티 프로젝트 빌드 시스템 구축하기</title><link>https://if1live.github.io/posts/make-unity-build-system/</link><pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/make-unity-build-system/</guid><description>개요 내가 만든 Toy Clash는 Samsung GearVR, Google Daydream, SteamVR, iOS를 지원한다. 이걸로 끝이 아니라 조만간 Windows Store도 추가될 예정이다.
내가 개발해보니까 이정도 갯수의 플랫폼을 지원하기 위해서는 빌드 시스템 수준에서도 크로스 플랫폼을 고려해야 하더라. 게임을 개발하면서 빌드시스템이 어떻게 변화되어서 최종 형태를 갖추었는지 정리해봤다.
수동 빌드 초기에는 빌드시스템이고 뭐고 없었다. 빌드를 뽑아서 보여줄 사람이 없는데 뭣하러 빌드에 공을 들이나? 유니티에서 직접 빌드했다.
간단한 빌드 스크립트 유니티에는 커맨드 라인을 통해 스크립트의 특정 함수를 호출하는 기능이 있다.</description></item><item><title>Build CEGUI 0.8.2 on Windows + OGRE</title><link>https://if1live.github.io/posts/cegui-build/</link><pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/cegui-build/</guid><description>CEGUI 빌드 하느라 삽질좀 해서 공유용 문서를 썻다. 어차피 요즘 대세는 유니티니까 팀원말고는 보지도 않겠지.
준비물 OGRE 빌드해놓기. 귀찮으면 prebuilt library가 있어도 된다. 오그레으로 샘플 한번이라도 제대로 빌드해봤으면 뭔소리인지 알거다 CEGUI 0.8.2 source 에서 받을 수 있다. 문서 작성 시점의 안정버전이 0.8.2 라서 그거 쓴다. Dependencies (Windows / Apple OS X Only) 를 받는다. CEGUI는 의존성이 크고 아름답게 걸린 물건이라서 수동으로 관련 라이브러리 하나씩 깔면 미친다. cmake. 왜냐하면 나는 cmake 빠돌이니까 빌드 과정 CEGUI Dependencies cegui-deps-0.</description></item></channel></rss>