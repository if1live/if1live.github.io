<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>http on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/http/</link><description>Recent content in http on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Mon, 12 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/http/index.xml" rel="self" type="application/rss+xml"/><item><title>express에서 에러로 HTTP status code 통제하기</title><link>https://if1live.github.io/posts/express-error-and-http-status-code/</link><pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/express-error-and-http-status-code/</guid><description>throw new Error(&amp;lsquo;BadRequest&amp;rsquo;) 자바스크립트에서 Error를 던져서 에러 처리하는 것은 쉽고 간단한 방법이다. express에서도 마찬가지이다. Error를 던지면 200 OK가 아닌 500 Internal Server Error를 발생시킬 수 있다.
const express = require('express'); const app = express(); app.get('/', (req, res) =&amp;gt; { throw new Error('BadRequest'); }); app.listen(3000, () =&amp;gt; { console.log('listen'); }); 요즘 세상에 에러났다고 무조건 500을 던지면 멍청한 REST API처럼 보인다. 상황에 맞춰서 4xx, 5xx를 던져야한다. 500 아닌 상태 코드를 보내고 싶으면 res.</description></item><item><title>HTTP 요청에 body를 붙여서 보내면 어떤 일이 벌어질까? part 2</title><link>https://if1live.github.io/posts/http-request-with-body-and-java-httpurlconnection/</link><pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/http-request-with-body-and-java-httpurlconnection/</guid><description>삽질의 시작 이전에 HTTP GET 요청에 body를 붙여서 보내면 어떤 일이 벌어질까?를 썼다. 나중에 자바의 HttpURLConnection의 동작이 안드로이드 버전의 UnityWebRequest와 똑같다는 소리를 들었다. 유니티 개발자들이 HTTP 라이브러리 만들기 귀찮아서 플랫폼별로 내장된 HTTP 라이브러리를 쓴거 아닐까? 하는 망상을 했다. 그래서 HttpURLConnection로 HTTP 요청을 보낼때 body 붙이는 짓을 해봤다.
테스트 const express = require('express'); const app = express(); app.use(express.json()); app.use(express.urlencoded({ extended: true })); app.all('/', (req, res) =&amp;gt; { res.json({ method: req.method, body: req.</description></item><item><title>HTTP GET 요청에 body를 붙여서 보내면 어떤 일이 벌어질까?</title><link>https://if1live.github.io/posts/http-get-request-with-body-and-http-library/</link><pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/http-get-request-with-body-and-http-library/</guid><description>삽질의 시작 요새 유니티로 게임을 만들고 있다. 나는 서버쪽을 작업하고 있다. 서버는 HTTP 기반으로 구현하고 있다. 실시간 통신이 필요없으면 HTTP 쓰는게 편하잖아? RESTful API 같은 통신 규격으로 구현하고 있다. GET, POST, DELETE, PUT 으로 행동을 구분하고 인자는 모두 body에 json을 붙여서 넘겼다. GET의 경우도 특별한 구분없이 POST랑 똑같은 인터페이스를 유지하도록 했다. 이 접근법은 elasticseach의 검색 API를 보고 배웠다.
curl -X GET &amp;quot;localhost:9200/twitter/_search&amp;quot; -H 'Content-Type: application/json' -d' { &amp;quot;query&amp;quot; : { &amp;quot;term&amp;quot; : { &amp;quot;user&amp;quot; : &amp;quot;kimchy&amp;quot; } } } ' query string을 쓰면 인자의 타입이 문자열로 인식되니 숫자로 변환해서 처리하는게 귀찮다.</description></item></channel></rss>