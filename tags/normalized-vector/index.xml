<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>normalized vector on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/normalized-vector/</link><description>Recent content in normalized vector on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Mon, 16 May 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/normalized-vector/index.xml" rel="self" type="application/rss+xml"/><item><title>고정소수점에서 2차원 벡터의 크기, 정규화된 벡터 계산하는 방법</title><link>https://if1live.github.io/posts/vector-length-and-normalize-doom-version/</link><pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/vector-length-and-normalize-doom-version/</guid><description>개요 게임을 만들면 벡터를 쓰게 된다. 그리고 벡터 클래스에서 2가지 기능은 끝도 없이 사용하게 된다. 하나는 정규화된 벡터(Normalized vector)를 구하는 것이고 다른 하나는 벡터의 길이이다.
DOOM을 만든 아저씨는 sqrt()가 느리다고 Fast inverse square root를 만들어낸 존 카멕 아저씨다. DOOM보다 훨씬 나중에 나온 Quake3에도 sqrt() 대신 흑마법을 사용했는데 DOOM에도 비슷한거 있지 않겠어? 고정소수점에서 어떻게 벡터의 정규화, 벡터의 길이를 구현했나 코드로 알아보자.
이 글을 읽기 전에 다음 글을 읽는것을 권장한다.
DOOM에서 배우는 각도 표현하는 방법과 sin, cos 구현법 DOOM에서 배우는 atan2(y, x) 구현 DOOM의 렌더리은 3차원이지만 내부 로직은 대부분 2차원 기준으로 굴러간다.</description></item></channel></rss>