<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>typeorm on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/typeorm/</link><description>Recent content in typeorm on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 25 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/typeorm/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeORM과 Knex 같이 쓰기</title><link>https://if1live.github.io/posts/typeorm-knex-integration/</link><pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/typeorm-knex-integration/</guid><description>요구사항 데이터베이스가 없는 백엔드는 상상하기 어렵다. 프로젝트에서 데이터베이스, 그중에서도 RDBMS를 쓰게 된다면 query builder, ORM 같은 물건을 피할 수 없다. 이 글에서는 TypeORM과 Knex를 섞어쓴 배경과 이를 구현한 매직을 다룬다.
TypeORM + Knex? ORM을 사용하면 엔티티의 형상을 관리하고 간단한 쿼리는 쉽게 처리할 수 있다. TypeORM을 오래 사용하고 익숙해져서 ORM 중에서 선택했다.
@Entity({ name: 'user' }) export class User { @PrimaryGeneratedColumn() id: number @Column() name: string } const firstUser = await userRepository.</description></item><item><title>typeorm에서 repository.save() 호출할때 UPDATE 쿼리만 사용하기</title><link>https://if1live.github.io/posts/typeorm-entity-proxy-for-save/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/typeorm-entity-proxy-for-save/</guid><description>repository.save() 의 함정 typeorm으로 아래와 같은 엔티티를 정의했다고 치자.
@Entity() export class UserEntity { @PrimaryColumn() key1: string; @PrimaryColumn() key2: string; @Column() data: string; } 엔티티를 살짝 고쳐서 저장하자.repository.save()를 이용하면 쉽게 저장할 수 있다. (BEGIN TRANSACTION, COMMIT이 쿼리에 들어가는걸 없애려고 transaction을 껏다)
const repo = conn.manager.getRepository(UserEntity); user.data = 'save'; await repo.save(user, { transaction: false }); 데이터 저장하는건 1줄인데 실행되는 SQL은 1개가 아니다.
query: SELECT &amp;quot;UserEntity&amp;quot;.&amp;quot;key1&amp;quot; AS &amp;quot;UserEntity_key1&amp;quot;, &amp;quot;UserEntity&amp;quot;.&amp;quot;key2&amp;quot; AS &amp;quot;UserEntity_key2&amp;quot;, &amp;quot;UserEntity&amp;quot;.&amp;quot;data&amp;quot; AS &amp;quot;UserEntity_data&amp;quot; FROM &amp;quot;user_entity&amp;quot; &amp;quot;UserEntity&amp;quot; WHERE &amp;quot;UserEntity&amp;quot;.</description></item></channel></rss>