<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>typeorm on if1live space</title><link>https://if1live.github.io/tags/typeorm/</link><description>Recent content in typeorm on if1live space</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 25 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/typeorm/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeORM과 Knex 같이 쓰기</title><link>https://if1live.github.io/posts/typeorm-knex-integration/</link><pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/typeorm-knex-integration/</guid><description>요구사항 데이터베이스가 없는 백엔드는 상상하기 어렵다. 프로젝트에서 데이터베이스, 그중에서도 RDBMS를 쓰게 된다면 query builder, ORM 같은 물건을 피할 수 없다. 이 글</description></item><item><title>typeorm에서 repository.save() 호출할때 UPDATE 쿼리만 사용하기</title><link>https://if1live.github.io/posts/typeorm-entity-proxy-for-save/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/typeorm-entity-proxy-for-save/</guid><description>repository.save() 의 함정 typeorm으로 아래와 같은 엔티티를 정의했다고 치자. @Entity() export class UserEntity { @PrimaryColumn() key1: string; @PrimaryColumn() key2: string; @Column() data: string; } 엔티티를 살짝 고쳐서 저장하자.repository.</description></item></channel></rss>