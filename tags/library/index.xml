<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>library on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/library/</link><description>Recent content in library on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 19 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/library/index.xml" rel="self" type="application/rss+xml"/><item><title>yup로 입력 검증을 덜 귀찮게 처리하자</title><link>https://if1live.github.io/posts/yup-declarative-input-validation/</link><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/yup-declarative-input-validation/</guid><description>개요 프로그래머가 러스트, C#, 타입스크립트같은 타입 있는 언어로 코드를 짜면 컴파일러에 의해서 타입이 보장되니 런타임에서 문제가 생기지 않는다. 미개한 스크립트 언어들만이 런타임에서 타입으로 문제가 생긴다. 그러니까 우리는 정적 언어를 써야한다.
물론 세상은 그렇게 굴러가지 않는다. 프로그래머가 코드를 완벽하게 통제하고 있을수는 있어도 외부에서의 입력까지 완벽하게 통제할수는 없다. 특히 인터넷에 연결된 서버의 경우는 밖에서 어떤 입력이 들어올지 알 수 없다. 그렇기 때문에 입력 검증은 필요하다.
선언형 입력 검증 입력 검증은 뻔한 부분이 많다.</description></item><item><title>MonoBehaviour를 더 좋게 만들어주는 라이브러리, VFW</title><link>https://if1live.github.io/posts/unity-library-vfw/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/unity-library-vfw/</guid><description>유니티로 개발하던 게임을 얼마전에 출시했다. 덕분에 몇달만에 여유가 생겼다. 그동안 바뻐서 블로그를 방치했었는데 다시 운영해볼까한다. 재밌는 떡밥이 뭐가 있을까 생각해봤는데 몇달동안 한게 유니티라서 유니티밖에 생각나는게 없더라. 당분간은 유니티 만지면서 건진걸 정리할 생각이다.
VFW VFW is an editor extension that offers much more advance editor extensibility features than what comes out of the box with Unity. A better drawing API, a faster GUI layout system for editor drawing, tons of attributes/drawers, helper types and more.</description></item><item><title>Django용 적절한 라이브러리 소개</title><link>https://if1live.github.io/posts/good-django-library/</link><pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/good-django-library/</guid><description>2년 전, 신규 웹 프로젝트를 django로 시작했지만 django의 몇가지 문제 때문에 flask로 갈아탔다. 프로젝트 시작한지 얼마되지 않은 시점이어서 코드가 별로 없었기 때문에 프레임웍을 바꾸는것이 별 부담이 되지 않았고 django에서 어떻게든 문제를 해결하려고 삽질할 수도 있었겠지만 flask로 선택하면 바로 해결되기 때문에 삽질하기 귀찮아서 django를 버렸다.
지금 시점에서 django와 flask 중 하나를 선택하라고 어떻게 할까? 지금은 django로 여러가지 삽질을 해서 과거에 해결하지 못했던 문제를 해결할 수 있는 라이브러리를 알고 있다. 그래서 이번 기회에 내가 알고있는 django를 flask만큼 좋게 만드는 몇가지 라이브러리를 소개한다.</description></item><item><title>파이썬 엑셀 쓰기 라이브러리 비교</title><link>https://if1live.github.io/posts/python-excel-library/</link><pubDate>Sun, 23 Feb 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/python-excel-library/</guid><description>subtitle: 무엇을 골라야 후회하지 않는가?
리눅스에서 굴러가는 파이썬 기반의 통계 도구를 만든적이 있다. 리눅스에서도 굴러가는 엑셀 라이브러리를 몇개 찾아봤고 직접 써본 다음에 정리했다. 찾아본 엑셀 라이브러리는 다음과 같다.
xlwt OpenPyXL XlsxWriter PyExcelerate 이중에서 내가 직접 사용해본것은 xlwt, OpenPyXL, XlsxWriter이다. (사용해본 순서로 적었다.)
supoort xlsx xls와 xlsx의 가장 큰 차이는 행, 열의 최대 갯수가 65535라는거다. 몇만건의 데이터를 다룰 가능성이 있다면 xlsx 지원하는 라이브러리를 사용해야 나중에 또 짜는 삽질은 안한다.
Library support xlsx xlwt x OpenPyXL o XlsxWriter o PyExcelerate o xlwt만 지원하지 않는다.</description></item><item><title>Vincent Font Library</title><link>https://if1live.github.io/posts/vincent-font-library/</link><pubDate>Fri, 19 Apr 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/vincent-font-library/</guid><description>Public Domain 8x8 Bitmap Font인 Vincent Font를 적절하게 사용하기 위해서 만든 코드를 정리했다. 앞으로는 새로운 OpenGL Text Library를 주로 사용하겠지만 왠지 아까워서&amp;hellip;
원래 OpenGLES 2.0 환경에서 사용하기 위해서 만들었던거라서 렌더링하는 함수는 따로 없다. (gles 2.0은 쉐이더를 쓰니까 렌더링 부분까지 라이브러리로 넣기 미묘하더라) 라이브러리에서는 폰트를 렌더링 하기위한 Vertex/Texture Coord 까지만 제공하도록했다. 구조는 간단하니까 필요한 사람은 알아서 잘 수정해서 쓸 수 있을것이다.
Repo 데모 스크린샷. 8x8폰트는 상당히 작다. 텍스트라벨의 원점은 왼쪽아래가 0,0이니까 사용할때 참고할 것</description></item><item><title>OpenGL Text Library</title><link>https://if1live.github.io/posts/opengl-text-library/</link><pubDate>Wed, 17 Apr 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/opengl-text-library/</guid><description>OpenGL 자체에는 텍스트 출력 관련된 함수가 없다. 근데 개발과정, 디버깅의 용도로 텍스트 출력이 있었으면 한다. glut기반으로 개발하고 있다면 glutStrokeString / glutBitmapString 를 사용하면 된다. 하지만 나는 glut를 안쓴다. 혹은 glut를 사용할수 없는 환경(예를 들면 OpenGLES)의 경우에는 어떻게 하면될까? 이 때 선택할 수 있는 방법과 내가 선택한 방법 및 간단하게 만들어본 라이브러리에 대해서 써봣다.
요구사항 될수있는한 간단하게 만든다 소스를 복붙하는것만으로도 다른 프로젝트에 사용할 수 있으면 좋겠다 cpp/h 딱 2개의 파일만 있으면 좋겟다.</description></item></channel></rss>