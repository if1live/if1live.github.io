<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>serverless on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/serverless/</link><description>Recent content in serverless on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 20 Aug 2022 23:00:00 +0900</lastBuildDate><atom:link href="https://if1live.github.io/tags/serverless/index.xml" rel="self" type="application/rss+xml"/><item><title>serverless 배포하기 (5) 최소한의 설정파일로 타입스크립트 함수 배포하기</title><link>https://if1live.github.io/posts/deploying-serverless-5-zero-configuration/</link><pubDate>Sat, 20 Aug 2022 23:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-5-zero-configuration/</guid><description>이전글에서는 빌드, 패키징 과정을 직접 제어해서 serverless plugin을 사용하지 않고 람다로 배포해보았다. 패키징 과정을 직접 제어할수 있으면 많은걸 할 수 있지만 이것은 모든 상황에서 필요한 기능이 아니다. 간단한 람다 함수 배포에서는 쉽고 간편한 방법을 사용하고 싶다. 쉽고 간편한 방법을 쓰다가 문제가 생겼을때만 직접 제어하는게 맞는 접근법이다. 이번 글에서는 최소한의 설정파일로 타입스크립트 함수를 람다에 배포해본다.
zero-configuration(?) 설정파일 하나 없이 타입스크립트 프로젝트를 람다로 배포하는건 사실 불가능하다. 타입스크립트 프로젝트와 람다를 정의하는데 필요한 최소한의 파일을 뽑아보자.</description></item><item><title>serverless 배포하기 (4) 플러그인 안쓰고 타입스크립트 함수 배포하기</title><link>https://if1live.github.io/posts/deploying-serverless-4-pnpm-with-script/</link><pubDate>Sat, 20 Aug 2022 20:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-4-pnpm-with-script/</guid><description>이전글에서는 serverless-webpack 를 사용했을때 발생할 수 있는 문제를 다뤘다. 이번에는 serverless-webpack같은 플러그인을 쓰지 않고 serverless framework만으로 타입스크립트 함수를 배포한다. 손으로 serverless를 배포해보면 AWS Lambda 핸들러가 어떻게 돌아갈지 이해하고 어떤 부분을 더 개선할수 있을지 보인다.
빌드 타입스크립트로 간단한 핸들러를 작성하고 webpack을 사용해서 번들링한다. 요새는 webpack 잘 안쓴다던데 예제 코드를 작성한게 2021년이라서 webpack을 유지했다. 관심있는 주제는 배포라서 타입스크립트, webpack 설정파일은 따로 다루지 않았다. (이전글 참고)
webpack-node-externals을 사용해서 번들링된 js에 패키지가 포함되는걸 피했다. 웹팩 빌드하면 .</description></item><item><title>serverless 배포하기 (3) serverless-webpack의 결함</title><link>https://if1live.github.io/posts/deploying-serverless-3-flaw-of-serverless-webpack/</link><pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-3-flaw-of-serverless-webpack/</guid><description>이전글에서는 serverless-webpack 기반으로 배포 패키지 크기를 줄여봤다. 3부에서는 serverless-webpack의 결함을 다룬다. 작성일 기준으로 최신 버전은 5.5.1 이다. serverless-webpack의 버전이 올라가면 글의 내용과 달라질 수 있다.
패키징이 오래 걸린다 npx sls webpack를 실행한후 기다리면 .webpack/, .serverless/ 디렉토리가 생긴다. .serverless/ 안에는 배포 패키지 xxx.zip가 들어있다. 배포 패키지를 생성하는 시간이 빠르면 배포 과정도 빠를 것이다. 근데 npx sls webpack는 생각보다 매우 오래 걸린다. 예제는 몇줄도 안되는 타입스크립트 코드니까 웹팩 빌드는 매우 빠를 것이다. 의존성 걸린 패키지는 이미 로컬 node_modules/에 들어있다.</description></item><item><title>serverless 배포하기 (2) serverless-webpack 기반으로 배포 패키지 크기 줄이기</title><link>https://if1live.github.io/posts/deploying-serverless-2-serverless-webpack-advance/</link><pubDate>Sun, 01 Aug 2021 23:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-2-serverless-webpack-advance/</guid><description>이전글에서는 serverless-webpack를 사용해서 람다 배포하는걸 다뤘다. 배포 패키지의 크기는 21.18 MB (21,685KB) 였다. 2부에서는 배포 패키지 크기를 줄이는 편법을 다룬다.
왜 배포 패키지 크기를 줄이나? 배포 패키지 (.zip 파일 아카이브)는 50MB로 제한되어있고 당분간 늘어나지 않을 것이다. (최근에 컨테이너 형태로 람다 배포하는 방법이 추가되었다. 배포컨테이너 이미지를 쓰면 10GB까지 배포할 수 있다.) mysql용 ORM, dynamodb용 ORM, lodash만 넣었을뿐인데 20MB이다. 50MB는 큰거 같으면서도 생각보다 작다. 개발하면서 패키지를 이것저것 추가하다보면 50MB를 넘을 수 있다.</description></item><item><title>serverless 배포하기 (1) serverless-webpack 초급</title><link>https://if1live.github.io/posts/deploying-serverless-1-serverless-webpack-beginning/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-1-serverless-webpack-beginning/</guid><description>why serverless-framework? 웹 콘솔을 통해서 AWS Lambda 함수를 만들고 코드를 고칠 수 있다. SQS로 람다를 트리거해서 SES를 통해 이메일 보내는 기능은 웹콘솔로도 충분히 작성할 수 있을 것이다. 하지만 현실의 애플리케이션은 이정도로 간단하지 않다. 복잡한 애플리케이션을 짜려면 외부 라이브러리가 필요하고 node.js 패키지를 갖다쓰게 된다. serverless framework를 사용하면 serverless 배포를 간단하게 할 수 있다.
예제 프로젝트 간단한 백엔드 프로젝트를 상상하자. 실제 구현은 하지 않고 구현에 필요한 패키지만 포함킨다.
타입스크립트 기반 mysql을 RDB로 사용: mysql 생산성을 위해 ORM을 붙임: typeorm 일부 데이터는 DyanmoDB에 저장된다: dynamo-types 코딩을 쉽게하는 도구: lodash SNS, SQS와 같은 AWS 서비스를 사용: aws-sdk serverless create --template aws-nodejs-typescript를 통해서 AWS Lambda 위해서 돌아가는 타입스크립트 기반의 헬로월드 프로젝트를 만들 수 있다.</description></item><item><title>callbackWaitsForEmptyEventLoop와 AWS Lambda의 함정</title><link>https://if1live.github.io/posts/trap-callback-waits-for-empty-event-loop/</link><pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/trap-callback-waits-for-empty-event-loop/</guid><description>개요 요새 typescript + express 백엔드를 짠다. 운영에 대해서는 조금도 생각하기 싫어서 AWS Lambda로 배포한다. serverless-http라는 좋은 물건을 쓰면 express를 AWS Lambda에서 돌릴 수 있다. express의 생산성을 유지하면서 AWS Lambda의 안정적인 운영을 챙길 수 있으니 좋은 구성이다. 하지만 개발 환경과 배포 환경이 근본적으로 달라서 여러가지 함정을 밟고 있다. 인상적이었던 함정 하나를 정리했다.
sentry 전송 실패 그냥 express를 사용하는 경우 sentry 에러 전송은 생각할 필요없다. 서버가 데몬처럼 돌아가니까 에러 리포트가 잘 보내진다.</description></item><item><title>serverless framework plugins</title><link>https://if1live.github.io/posts/serverless-framework-plugins/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/serverless-framework-plugins/</guid><description>개요 serverless framework은 aws lambda 같은 서버리스 플랫폼에 배포할때 유용한 도구이다. 하지만 serverless framework를 그대로 쓰는건 불편하다. 다행히도 serverless에는 플러그인이 많이 있고 적절한걸 붙이면 많이 편해진다.
내가 사용 중인 serverless 플러그인을 정리해봤다. 사용법은 각각의 README를 참고하면 되기때문에 다루지 않았다.
serverless-webpack 나는 타입스크립트를 사용한다. serverless에서 타입스크립트 사용하는 방법 찾다가 serverless-plugin-typescript를 찾아서 사용했다. serverless-plugin-typescript는 소개 첫줄부터 zero-config 를 강조하더라. 플러그인만 설치해도 타입스크립트를 쓸 수 있더라.
나중에 더 배우고나니까 serverless가 타입스크립트를 기본적으로 지원하더라. serverless create --template aws-nodejs-typescript --name xxx 로 프로젝트를 생성시킬 수 있다.</description></item></channel></rss>