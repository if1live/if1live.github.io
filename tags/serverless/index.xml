<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>serverless on if1live space</title><link>https://if1live.github.io/tags/serverless/</link><description>Recent content in serverless on if1live space</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Thu, 30 Mar 2023 20:00:00 +0900</lastBuildDate><atom:link href="https://if1live.github.io/tags/serverless/index.xml" rel="self" type="application/rss+xml"/><item><title>serverless-offline 없이 AWS Lambda 함수를 로컬에서 실행하는 방법</title><link>https://if1live.github.io/posts/emulate-aws-lambda-function-locally-without-serverless-offline/</link><pubDate>Thu, 30 Mar 2023 20:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/emulate-aws-lambda-function-locally-without-serverless-offline/</guid><description>serverless-offline: 장점 Serverless Offline는 AWS Lambda에 배포하지 않고 함수를 로컬호스트에서 테스트해볼수 있는 좋은 툴이다. serverless offline 문서에 의하면 Node.js, Python, Ruby, Go, Java을 테스트</description></item><item><title>serverless 배포하기 (5) 최소한의 설정파일로 타입스크립트 함수 배포하기</title><link>https://if1live.github.io/posts/deploying-serverless-5-zero-configuration/</link><pubDate>Sat, 20 Aug 2022 23:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-5-zero-configuration/</guid><description>이전글에서는 빌드, 패키징 과정을 직접 제어해서 serverless plugin을 사용하지 않고 람다로 배포해보았다. 패키징 과정을 직접 제어할수 있으면 많은걸 할 수 있지만 이것</description></item><item><title>serverless 배포하기 (4) 플러그인 안쓰고 타입스크립트 함수 배포하기</title><link>https://if1live.github.io/posts/deploying-serverless-4-pnpm-with-script/</link><pubDate>Sat, 20 Aug 2022 20:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-4-pnpm-with-script/</guid><description>이전글에서는 serverless-webpack 를 사용했을때 발생할 수 있는 문제를 다뤘다. 이번에는 serverless-webpack같은 플러그인을 쓰지 않고 serverless framework만</description></item><item><title>serverless 배포하기 (3) serverless-webpack의 결함</title><link>https://if1live.github.io/posts/deploying-serverless-3-flaw-of-serverless-webpack/</link><pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-3-flaw-of-serverless-webpack/</guid><description>이전글에서는 serverless-webpack 기반으로 배포 패키지 크기를 줄여봤다. 3부에서는 serverless-webpack의 결함을 다룬다. 작성일 기준으로 최신 버전은 5.5.1 이다</description></item><item><title>serverless 배포하기 (2) serverless-webpack 기반으로 배포 패키지 크기 줄이기</title><link>https://if1live.github.io/posts/deploying-serverless-2-serverless-webpack-advance/</link><pubDate>Sun, 01 Aug 2021 23:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-2-serverless-webpack-advance/</guid><description>이전글에서는 serverless-webpack를 사용해서 람다 배포하는걸 다뤘다. 배포 패키지의 크기는 21.18 MB (21,685KB) 였다. 2부에서는 배포 패키지 크기를 줄이</description></item><item><title>serverless 배포하기 (1) serverless-webpack 초급</title><link>https://if1live.github.io/posts/deploying-serverless-1-serverless-webpack-beginning/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-1-serverless-webpack-beginning/</guid><description>why serverless-framework? 웹 콘솔을 통해서 AWS Lambda 함수를 만들고 코드를 고칠 수 있다. SQS로 람다를 트리거해서 SES를 통해 이메일 보내는 기능은 웹콘솔로도 충분히 작성할 수 있을 것이다</description></item><item><title>callbackWaitsForEmptyEventLoop와 AWS Lambda의 함정</title><link>https://if1live.github.io/posts/trap-callback-waits-for-empty-event-loop/</link><pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/trap-callback-waits-for-empty-event-loop/</guid><description>개요 요새 typescript + express 백엔드를 짠다. 운영에 대해서는 조금도 생각하기 싫어서 AWS Lambda로 배포한다. serverless-http라는 좋은 물건을 쓰면 ex</description></item><item><title>serverless framework plugins</title><link>https://if1live.github.io/posts/serverless-framework-plugins/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/serverless-framework-plugins/</guid><description>개요 serverless framework은 aws lambda 같은 서버리스 플랫폼에 배포할때 유용한 도구이다. 하지만 serverless framework를 그대로 쓰는건 불편하다. 다행히도 serv</description></item></channel></rss>