<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>shader on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/shader/</link><description>Recent content in shader on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 27 Apr 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/shader/index.xml" rel="self" type="application/rss+xml"/><item><title>셰이더 프로그래밍 입문 for GLSL</title><link>https://if1live.github.io/posts/glsl-example/</link><pubDate>Sat, 27 Apr 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/glsl-example/</guid><description>포프님의 **셰이더 프로그래밍 입문**을 읽으면서 이거 GLSL로 구현하면서 공부해보자 하면서 만든게 있는데 귀찮아서 방치해놧다가 지금서야 정리했다. 책은 DX 기준으로 작성되어 있지만 GL과 DX는 수학상으로도(또한 구현상으로도) 다른게 많아서 좀 고쳤다.
그리고 오늘 프로젝트를 분리시켰다!
Repo Library OpenGL은 DirectX와는 달리 그 자체로는 뭐 어떻게 써먹을 방법이 없다. 수학라이브러리도 내장되어있지 않고 텍스쳐 로딩도 없고 창초기화도 없고 등등&amp;hellip;.되는게 하나도 없어서 라이브러리를 적절히 붙여야 돌릴 수 있다. 구현에 사용한 라이브러리/참고코드 목록이다. (아마도 다음부터 GL예제를 올리때는 귀찮아서 안쓰겟지만 한번은 쓰는게 낫겟지&amp;hellip;)</description></item><item><title>Uber Shader</title><link>https://if1live.github.io/posts/uber-shader/</link><pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/uber-shader/</guid><description>기본 개념은 한 개의 쉐이더 소스를 짜고 ifdef/ifndef 질을 해서 쉐이더 코드를 여러 형태로 변화시키는 것이다. 이것이 의미가 있는 이유는 여러 종류의 광원모델을 기반으로 쉐이더를 짠다고 하더라도 똑같은 로직/속성의 반복이 등장하기 떄문이다. (즉, 쉐이더 코드의 중복을 줄일 수 있다.)
간단한 예시 하나의 프래그먼트 쉐이더로 색을 그대로 칠하는것과 텍스쳐와 색을 조합해서 칠하는것을 처리하는 예제코드이다. 다음의 예제코드의 맨 앞부분에 매크로를 집어넣고 쉐이더를 컴파일하면 그 결과물은 각각 다른것이 나온다.
void main() { vec4 color = vec4(1, 1, 1, 1); #if USE_TEXTURE == 1 gl_FragColor = texture2D(tex, texcoord) * color; #else gl_FragColor = color; #endif } USE_TEXTURE 1 input #define USE_TEXTURE 1 // input original source // .</description></item></channel></rss>