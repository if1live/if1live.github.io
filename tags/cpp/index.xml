<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cpp on if1live space</title><link>https://if1live.github.io/tags/cpp/</link><description>Recent content in cpp on if1live space</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Thu, 25 Feb 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>존재하지 않는 키로 테이블에 접근하면?</title><link>https://if1live.github.io/posts/if-key-does-not-exist-then/</link><pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/if-key-does-not-exist-then/</guid><description>존재하지 않은 키로 테이블에 접근했을때 각각의 언어는 어떤 식으로 행동할까? 올바르지 않은 인덱스로 리스트에 접근하면 각각의 언어는 어떤 식으로 행동할까? 파이썬</description></item><item><title>스택 지역 변수의 주소값을 이용한 버그</title><link>https://if1live.github.io/posts/stack-allocation-voodoo-magic/</link><pubDate>Wed, 07 Oct 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/stack-allocation-voodoo-magic/</guid><description>얼마전에 gcc와 clang이 정렬되지 않은 구조체(예를 들어 구조체의 크기가 7바이트) 를 어떤식으로 메모리에 배치하는지 테스트하다가 재밌는 현상을 발견해</description></item><item><title>C++ TMP를 이용해서 2015년의 13일의 금요일 계산하기</title><link>https://if1live.github.io/posts/friday-the-13th-tmp/</link><pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/friday-the-13th-tmp/</guid><description>개요 2015년 3월 15일에 코딩 전력 60분!에서 13일의 금요일을 구하는 문제를 던졌다. 다음 트윗에서 Short coding을 목표로 제시했지만 나는 그걸 못봤다</description></item><item><title>C++에서 Python의 with statment 구현하기</title><link>https://if1live.github.io/posts/with-statement-cpp/</link><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/with-statement-cpp/</guid><description>파이썬에는 객체의 생성과 소멸의 범위를 확실하게 정하는 목적으로 with 문법이 존재한다. 파이썬은 C와 달리 블럭 스코프를 이용해서 객체의 생성주기를 통제할수 없기 때</description></item><item><title>C#에서 C++ DLL 사용하기</title><link>https://if1live.github.io/posts/csharp-cpp-dll/</link><pubDate>Tue, 12 Feb 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/csharp-cpp-dll/</guid><description>개요 C#에서 C++ dll을 사용하기 위해서는 pinvoke(platform invoke)를 사용하면 된다. 아래의 내용은 사용법에 대한 간단한 정리이다. 내용 생략하고 Sample 를 받아도 된다. C++</description></item><item><title>auto_ptr을 썻는데 소멸자가 불리지 않는다?</title><link>https://if1live.github.io/posts/auto-ptr/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/auto-ptr/</guid><description>auto_ptr은 아주 간단한 스마트 포인터의 일정으로 동적할당된 객체를 자동으로 delete하는데 쓰인다. 하지만 잘못된 코딩을 하면 소멸자가 호출되지 않</description></item><item><title>Box2d Stack Allocator</title><link>https://if1live.github.io/posts/box2d-stack-allocator/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/box2d-stack-allocator/</guid><description>구조 고정크기로 b2_stackSize(기본값 100kb)의 메모리를 가지고 이것을 맨앞부터 쪼개서(그래서 스택기반) 사용하는 할당자이다. 구조가 단</description></item><item><title>C#의 프로퍼티 C++에서 쓰기</title><link>https://if1live.github.io/posts/charp-like-property/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/charp-like-property/</guid><description>본문을 읽기전에 아래의 2개의 페이지를 읽어보면 이해에 도움이 될것이다. 사실상 내가 만든 코드는 위의 2개를 내 방식대로 묶은것뿐이다 [Property(programming)][1] [C++에서 속성 구현하</description></item><item><title>cocos2d-x 메모리 관리에 대한 간단한 정리</title><link>https://if1live.github.io/posts/cocos2dx-memory-management/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/cocos2dx-memory-management/</guid><description>cocos2d-x는 cocos2d를 거의 그대로 포팅한 2d게임 엔진이다. 원작이 objc 기반인 cocos2d를 C++로 옮겼으니 완전히 똑같지는 않다. 특히</description></item><item><title>memset로 클래스 초기화 쉽게 하기</title><link>https://if1live.github.io/posts/class-init-with-memset/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/class-init-with-memset/</guid><description>일반적으로 C++에서는 멤버변수 초기화를 다음과 같은 문법으로 한다. class SomeClass { public: SomeClass() : a(0), b(0) {} private: int a; float b; }; 만약 클래스안에 멤버변수가 많다면 위와 같은 문법으로 코</description></item><item><title>윈도/ios/안드로이드를 커버할수 있는 PCH 구조 잡기</title><link>https://if1live.github.io/posts/cross-platform-stdafx/</link><pubDate>Sat, 08 Dec 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/cross-platform-stdafx/</guid><description>윈도/ios/안드로이드를 커버할수 있는 PCH 구조 잡기</description></item><item><title>cocos2d-x 1.x->2.0으로 변하면서 바뀐 부분 :: CCPoint</title><link>https://if1live.github.io/posts/ccpoint-lua/</link><pubDate>Tue, 04 Dec 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/ccpoint-lua/</guid><description>cocos2d-x 1.x-&amp;gt;2.0으로 변하면서 바뀐 부분 :: CCPoint</description></item><item><title>플랫폼 매크로 추가 선언 없이 윈도/iOS/안드로이드 구분하는 매크로</title><link>https://if1live.github.io/posts/platform-macro/</link><pubDate>Fri, 30 Nov 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/platform-macro/</guid><description>플랫폼 매크로 추가 선언 없이 윈도/iOS/안드로이드 구분하는 매크로</description></item><item><title>C++ namespace 들여쓰기 방지하는 편법</title><link>https://if1live.github.io/posts/namespace-indent/</link><pubDate>Wed, 28 Nov 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/namespace-indent/</guid><description>C++ namespace 들여쓰기 방지하는 편법</description></item><item><title>C++ 다중상속(interface) 관련 삽질 자료</title><link>https://if1live.github.io/posts/cpp-casting/</link><pubDate>Tue, 27 Nov 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/cpp-casting/</guid><description>C++ 다중상속(interface) 관련 삽질 자료</description></item><item><title>생성자,소멸자 강제호출</title><link>https://if1live.github.io/posts/call-ctor-dtor/</link><pubDate>Mon, 26 Nov 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/call-ctor-dtor/</guid><description>개요 성능, 혹은 디버깅을 위해서 커스텀 malloc/free를 쓰는 일이 잇다. 문제는 malloc/free로 사용하면 소멸자/생성자가 호출되지 않기 떄</description></item></channel></rss>