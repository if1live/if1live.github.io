<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on if1live space</title><link>https://if1live.github.io/tags/linux/</link><description>Recent content in linux on if1live space</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Mon, 08 Dec 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Process Address Space</title><link>https://if1live.github.io/posts/system-programming-process-address-space/</link><pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-programming-process-address-space/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. 개요 선형 주소 공간 : 2 ** BIT_PER_LONG byte, 32bit의 경우 4GB 0 ~ 3GB (PAGE_OFFSET) : Process Address Space 3G의 Process Address</description></item><item><title>Linux File System</title><link>https://if1live.github.io/posts/system-programming-linux-file-system/</link><pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-programming-linux-file-system/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Linux File System File System 커널 및 외부 메모리안의 파일 시스템의 디렉토리를 관리하는 커널 서브 시</description></item><item><title>Ext2 File System</title><link>https://if1live.github.io/posts/system-programming-ext2-file-system/</link><pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-programming-ext2-file-system/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Abstract View of VFS Objects In kernel memory super block dentry inode file VFS, 어떤 FS를 쓰더라도 동일 File System 문서 참고 On disk Ext2 Filesystem</description></item><item><title>Memory Management</title><link>https://if1live.github.io/posts/system-programming-memory-management/</link><pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-programming-memory-management/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Linux Memory Management 가상 메모리 요구 페이지 (Demand Paged Virtual Memory) 모델 물리 페이지의 매핑, 할당, 관리 2차</description></item><item><title>Memory Addressing</title><link>https://if1live.github.io/posts/system-programming-memory-addressing/</link><pubDate>Wed, 26 Nov 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-programming-memory-addressing/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Memroy Addressing (Intel x86) 논리 주소 (Logical Address) 명령어나 데이터를 참조할때 사용하는 주소 세그먼트 + 오프</description></item><item><title>Kernel Synchronization</title><link>https://if1live.github.io/posts/system-prog-kernel-synchronization/</link><pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-prog-kernel-synchronization/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 앞으로 없다. Kernel Synchronization Kernel Control Paths 커널 함수는 다음 요청에 따라서 실행된다 유저 모드에서 실행되는 프로세스</description></item><item><title>Signals</title><link>https://if1live.github.io/posts/system-prog-signals/</link><pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-prog-signals/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 앞으로 없다. Signals Signals Signal 프로세스에 이벤트를 알릴때 보내는 것 프로세스나 프로세스 그룹에 간단한 메세</description></item><item><title>System Calls</title><link>https://if1live.github.io/posts/system-prog-system-call/</link><pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-prog-system-call/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 앞으로 없다. System Call System Call Principles 어플리케이션과 하드웨어 사이에 별도의 레이어를 끼워넣는다 프로그래밍</description></item><item><title>Timing Measurements</title><link>https://if1live.github.io/posts/system-prog-timing-measurements/</link><pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-prog-timing-measurements/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 앞으로 없다. Timing Measurements Computer Time 많은 컴퓨터 작업은 time-driven time-driven example 주기적으로 소프트웨어 업데이트 확인 유저가 일정</description></item><item><title>Interrupt and Exceptions</title><link>https://if1live.github.io/posts/sytem-prog-study-interrupt-and-exceptions/</link><pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/sytem-prog-study-interrupt-and-exceptions/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Interrupt and Exceptions Interrupt vs Exception Interrupt Asynchronous Interrupt 외부장치 -&amp;gt; CPU 외부 장치 : keyboard, etc CPU : processor&amp;rsquo;s interrupt pin으로 입력 받기</description></item><item><title>Linux Process Scheduling</title><link>https://if1live.github.io/posts/system-prog-linux-process-schduling/</link><pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-prog-linux-process-schduling/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Linux Process Scheduling Process Schdeuling 언제 switch 할 것인가 + 무엇을 switch 할 것인가? 목표 빠른 프로세스 반응 시간 백</description></item><item><title>Linux Processes</title><link>https://if1live.github.io/posts/system-prog-linux-processes/</link><pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-prog-linux-processes/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Linux Processes Processor Execution Modes Dual Mode Operation User Mode Level 3 권한 제한되어있음 일반적인 프로그램 Kernel Mode Level 0 커널의</description></item></channel></rss>