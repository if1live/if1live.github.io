<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ruby on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/ruby/</link><description>Recent content in ruby on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 01 Mar 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>버그 삽질기 - 파이썬으로 구현한 API 서버 루비로 포팅하기</title><link>https://if1live.github.io/posts/http-request-params-trap-python-and-ruby/</link><pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/http-request-params-trap-python-and-ruby/</guid><description>간단한 명언 API 서버를 만들보자. 필요한 기능은 다음과 같다.
명언 목록을 데이터로 분리한다. 나중에 목록을 쉽게 갱신할수 있어야한다. 서버에 접속하면 명언중 하나를 임의로 골라서 보여준다. Query String을 이용해서 특정 명언을 골라서 볼수 있어야 한다. (결정론적으로 작동해야 테스트하기 쉬우니까) Query String이 올바르지 않으면 임의로 하나를 보여준다. 다은은 간단한 작성된 명언 목록이다. 한줄에 하나의 명언을 적었다.
가정이 무너지고 사회가 무너지고 안 되겠소 쏩시다 트위터는 인생의 낭비 비둘기야 먹자 애니메이션 캐릭터에 꼴린다면 정신병원에 가보세요 인간의 욕심은 끝이 없고 같은 실수를 반복한다 마이크로 프레임워크 중 하나인 flask로 간단한 API 서버를 만들었다.</description></item><item><title>존재하지 않는 키로 테이블에 접근하면?</title><link>https://if1live.github.io/posts/if-key-does-not-exist-then/</link><pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/if-key-does-not-exist-then/</guid><description>존재하지 않은 키로 테이블에 접근했을때 각각의 언어는 어떤 식으로 행동할까? 올바르지 않은 인덱스로 리스트에 접근하면 각각의 언어는 어떤 식으로 행동할까? 파이썬, 루비, C++를 통해서 알아보자.
파이썬 파이썬은 C와 달리 음수 인덱스를 지원한다. -len(array) ~ len(array)-1 까지는 올바른 인덱스이다. 음수 인덱스를 쓰면 배열을 뒤에서부터 접근할 수 있다.
만약 파이썬의 리스트에 허용 범위를 벗어난 인덱스로 접근하면 어떤 일이 벌어질까? 존재하지 않는 키로 파이썬의 사전에 접근하면 어떤 일이 벌어질까?
foo_list = [1, 2, 3] try: print(foo_list[100]) except Exception as ex: print(repr(ex)) foo_dict = {&amp;quot;foo&amp;quot;: 2, &amp;quot;bar&amp;quot;: 4} try: print(foo_dict[&amp;quot;spam&amp;quot;]) except Exception as ex: print(repr(ex)) $ python .</description></item><item><title>올바르지 않은 값을 정수로 변환하기 - 파이썬 vs 루비</title><link>https://if1live.github.io/posts/make-int-from-invalid-value-python-and-ruby/</link><pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/make-int-from-invalid-value-python-and-ruby/</guid><description>올바르지 않은 값을 정수로 바꾸는 일은 웹을 포함한 여러가지 개발에서 자주하는 작업 중 하나이다. 예를 들어서 /articles/?id={int} 를 구현한 서버가 있다고 가정하자. /articles/?id=1234와 같이 id에 정수 문자열이 들어갈수도 있다. 하지만 /articles/?id=test와 같이 숫자가 아닌 문자열이 들어갈수도 있고 /articles/처럼 id가 없을수도 있다. 개발자는 이런 예외 상황을 잘 처리해야된다.
이 글에서는 파이썬과 루비에서 문자열을 숫자로 변환할때의 차이점을 간단하게 정리했다.
String to int Success &amp;quot;123&amp;quot;과 같이 딱봐도 정수처럼 보이는 문자열을 정수로 바꿔보았다.
print(int(&amp;quot;123&amp;quot;)) $ python str_to_int_success.</description></item><item><title>삽질로 알아보는 파이썬과 루비의 기본 매개변수</title><link>https://if1live.github.io/posts/default-argument-python-and-ruby/</link><pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/default-argument-python-and-ruby/</guid><description>파이썬과 루비의 문법 차이로 인한 버그를 당한적은 자주 있었지만 글로 다룰 생각까진 (게을러서) 하지 않았다. 하지만 아래의 글을 읽고 파이썬와 루비의 차이로 인한 버그를 정리해보면 재밌을거라고 생각했다. 그래서 써보기로 했다.
루비와 파이썬에서 함수 호출과 함수 참조에 대한 차이
기본 매개변수를 이용해서 낚시를 해보자. (얼마나 낚일지는 모르지만) Default argument 를 남들이 기본 매개변수라고 번역하길래 기본 매개변수라고 적었지만 디폴트 매개변수, 기본 인자 등등으로도 불리는거같다. 용어를 하나로 합치려고 default argument 만을 사용하겠다.
문제1. 다음 코드의 실행 결과는?</description></item><item><title>예제로 보는 Python과 Ruby의 문법 차이 - Multiple Assignment</title><link>https://if1live.github.io/posts/multiple-assignment-python-and-ruby/</link><pubDate>Sun, 14 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/multiple-assignment-python-and-ruby/</guid><description>파이썬과 루비는 겉보기에는 비슷해보이면서 완전히 다르게 행동하는 문법이 있다. 그래서 파이썬을 생각하면서 루비 코드를 짜면 어처구니 없는 버그가 생긴다. 이런 일을 방지하고자 지금까지 당해본 파이썬과 루비의 문법 차이를 정리하려고 한다. 오늘은 Multiple Assignment이다. (여러 개의 변수에 값을 동시에 할당하기)
Python 2.x 변수 1개에 정수를 1개 할당하는 것부터 시작하자. 매우 기본적인 문법이다.
source: a = 1 a=1 변수 2개에 정수를 2개 할당하면 어떻게 될까? 1, 2 이라고 썻기때문에 값이 2개인 것처럼 보이지만 사실 파이썬에서는 (1, 2) 같이 튜플로 묶어서 처리한다.</description></item></channel></rss>