<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>singleton on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/singleton/</link><description>Recent content in singleton on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 18 Jun 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/singleton/index.xml" rel="self" type="application/rss+xml"/><item><title>완벽한 싱글턴을 찾아서 - 테스트</title><link>https://if1live.github.io/posts/singleton-test/</link><pubDate>Tue, 18 Jun 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/singleton-test/</guid><description>이전에 사람들이 많이 사용하는 방식의 싱글턴을 까는 글을 쓰고 그것을 해결책을 정리했었다.(사실은 복붙에 더 가깝지만&amp;hellip;) 최근에 조금 더 생각해보니 그거보다 더 좋은 방법(특히 테스트측면에서)이 생각나서 똑같은 주제를 재탕하기로 했다.
테스트에서 싱글턴의 뭐가 문제인가? 전역변수 기반의 싱글턴이 사고치는 경우를 준비하자.
FileSystem이라는 싱글턴 클래스가 존재한다. 싱글턴으로 사용하는 전역변수의 이름은 gFileSystem이다. 그리고 gFileSystem을 기반으로 구현된 PackageManager라는 클래스가 있다. PackageManager에는 foo(), bar()라는 함수가 존재한다.
위의 상황에 대응하는 유닛테스트를 다음과 같이 작성했다.
class PackageManagerTest : public ::testing::Test { protected: virtual void SetUp() { gFileSystem.</description></item><item><title>나는 싱글턴이 싫어요</title><link>https://if1live.github.io/posts/i-hate-singleton/</link><pubDate>Sun, 19 May 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/i-hate-singleton/</guid><description>옛날에는 싱글턴을 자주 썼는데 요즘에는 안쓴다. 내가 싱글턴을 안쓰게 된 몇가지 이유가 있는데 다음과 같다
소멸 시점이 있긴한가? static을 이용해서 구현한 싱글턴 설계에서 존재하는 문제점이다.
class Singleton { private: Singleton() {} Singleton(const Singleton&amp;amp; other); public: static Singleton&amp;amp; getInstance() { static Singleton ctx; return ctx; } }; Singleton::getInstance()함수를 호출하면 싱글턴을 적절히 사용할수있다. 하지만 소멸은&amp;hellip;? 싱글턴의 소멸은 OS님께서 알아서 해주시는거 외에는 기대할 방법이 없다. 싱글턴 A/B/C가 있는데 의존성 문제로 각각이 일정한 순서로 소멸되어야한다면?</description></item></channel></rss>