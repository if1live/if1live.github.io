<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>unity on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/unity/</link><description>Recent content in unity on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 12 Nov 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/unity/index.xml" rel="self" type="application/rss+xml"/><item><title>유니티 프로젝트 빌드 시스템 구축하기</title><link>https://if1live.github.io/posts/make-unity-build-system/</link><pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/make-unity-build-system/</guid><description>개요 내가 만든 Toy Clash는 Samsung GearVR, Google Daydream, SteamVR, iOS를 지원한다. 이걸로 끝이 아니라 조만간 Windows Store도 추가될 예정이다.
내가 개발해보니까 이정도 갯수의 플랫폼을 지원하기 위해서는 빌드 시스템 수준에서도 크로스 플랫폼을 고려해야 하더라. 게임을 개발하면서 빌드시스템이 어떻게 변화되어서 최종 형태를 갖추었는지 정리해봤다.
수동 빌드 초기에는 빌드시스템이고 뭐고 없었다. 빌드를 뽑아서 보여줄 사람이 없는데 뭣하러 빌드에 공을 들이나? 유니티에서 직접 빌드했다.
간단한 빌드 스크립트 유니티에는 커맨드 라인을 통해 스크립트의 특정 함수를 호출하는 기능이 있다.</description></item><item><title>유니티 로그 뷰어, Sagiri</title><link>https://if1live.github.io/posts/introduce-sagiri/</link><pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/introduce-sagiri/</guid><description>개요 게임 개발하다보면 로그를 계속 보게 된다. 유니티의 경우 에디터 환경에서는 console창을 이용해서 로그를 볼수있다. 하지만 윈도우, 안드로이드, iOS 환경으로 빌드한 이후에는 로그를 보는게 쉽지 않다. 그래도 에디터에서는 정상적으로 돌아가지만 실제 기기에서는 문제가 생기는 경우가 있기때문에 로그를 보는 기능은 빌드에서도 필요하다.
sagiri는 유니티 로그를 웹브라우저에서 보기 위해서 개발된 라이브러리이다. CUDLR과 Unity-File-Debug를 섞어서 만들었다. 개발이 대강 끝났으니 sagiri를 개발하게 된 과정을 정리해보기로 했다.
왜 로그 뷰어를 새로 짰는가? 로그를 찍자 빌드된 게임에서 로그를 찍으면 플랫폼에 따라서 적절히 처리된다.</description></item><item><title>GC없이 C# Dictionary에서 enum을 key로 쓰기</title><link>https://if1live.github.io/posts/csharp-dictionary-enum-key-without-gc/</link><pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/csharp-dictionary-enum-key-without-gc/</guid><description>C# Dictionary + enum C# Dictionary는 Key-Value로 데이터를 저장할수 있는 좋은 자료구조이다. enum은 key로 쓰기에 좋은 타입이다. 그렇다면 둘을 합쳐보자.
적당한 클래스와 enum을 준비한다.
﻿interface IState { string GetMessage(); } class State_Wait : IState { public string GetMessage() { return &amp;quot;wait&amp;quot;; } } class State_Run : IState { public string GetMessage() { return &amp;quot;run&amp;quot;; } } enum States { Wait, Run, } Dictionary을 만들고 데이터를 저장해두자. Update()에서 Dictionary에 접근해보자. Dictionary를 쓰면 자주 사용할 기능 두 개를 사용했다.</description></item><item><title>C#에서 GC없이 enum을 int로 변환하기</title><link>https://if1live.github.io/posts/csharp-enum-to-int/</link><pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/csharp-enum-to-int/</guid><description>시나리오: enum으로 상태 관리 간단한 예제를 생각해보자. IState를 구현한 클래스가 있다고 가정하자. 그리고 클래스를 enum으로 관리하려고한다. IState를 구현한 클래스가 몇개로 늘어날지 모르니 배열을 사용했다.
﻿interface IState { string GetMessage(); } class State_Wait : IState { public string GetMessage() { return &amp;quot;wait&amp;quot;; } } class State_Run : IState { public string GetMessage() { return &amp;quot;run&amp;quot;; } } enum States { Wait, Run, } ﻿using UnityEngine; class Main_SimpleArray : MonoBehaviour { IState[] states; private void Start() { states = new IState[2]; states[(int)States.</description></item><item><title>유니티에서 Switch Platform 안쓰고 크로스 플랫폼 지원하기</title><link>https://if1live.github.io/posts/unity-cross-platform-without-platform-switch/</link><pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/unity-cross-platform-without-platform-switch/</guid><description>switch platform? ios, android를 동시에 지원하는 게임을 유니티로 만든다고 가정해보자. 안드로이드 빌드, iOS 빌드를 만들때마다 Switch Platform을 하면 시간이 오래 걸린다. 에셋이 많아지면 많아질수록 시간이 길어져서 수십분이 걸릴수 있다. 이 글에서는 switch platform을 매번 누르지 않고 여러 플랫폼을 동시에 다루는 방법을 다룬다.
Solution 1. 프로젝트 복제 가장 간단한 방법은 프로젝트 폴더를 2개 만드는 것이다.
유니티 프로젝트가 있는 git 저장소가 있다 git clone 받아서 game_ios 폴더로 만든다. git clone 받아서 game_anriod 폴더를 만든다.</description></item><item><title>MonoBehaviour를 더 좋게 만들어주는 라이브러리, VFW</title><link>https://if1live.github.io/posts/unity-library-vfw/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/unity-library-vfw/</guid><description>유니티로 개발하던 게임을 얼마전에 출시했다. 덕분에 몇달만에 여유가 생겼다. 그동안 바뻐서 블로그를 방치했었는데 다시 운영해볼까한다. 재밌는 떡밥이 뭐가 있을까 생각해봤는데 몇달동안 한게 유니티라서 유니티밖에 생각나는게 없더라. 당분간은 유니티 만지면서 건진걸 정리할 생각이다.
VFW VFW is an editor extension that offers much more advance editor extensibility features than what comes out of the box with Unity. A better drawing API, a faster GUI layout system for editor drawing, tons of attributes/drawers, helper types and more.</description></item></channel></rss>