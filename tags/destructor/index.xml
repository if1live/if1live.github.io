<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>destructor on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/destructor/</link><description>Recent content in destructor on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 19 Mar 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/destructor/index.xml" rel="self" type="application/rss+xml"/><item><title>delete this 이용해서 터미널에 삼각형 그리기</title><link>https://if1live.github.io/posts/recursion-with-destructor/</link><pubDate>Sat, 19 Mar 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/recursion-with-destructor/</guid><description>어제 회사에서 delete this 에 대해 이것저것 이야기를 했었다. 그리고 꿈에서 delete this 로 재귀를 구현하는 흑마법이 생각나서 짜봤다.
목표 : delete this를 이용해서 다음과 같은 삼각형을 출력해야한다. for, while 같은 키워드 사용 금지 명시적인 재귀호출 없음, 단 delete this는 허용 * ** *** 기본 구현 delete를 쓰면 메모리를 해제하고 소멸자를 호출한다. 그렇다면 소멸자 안에서 delete this를 사용하면 자기 자신의 소멸자를 다시 호출할테니 재귀호출이 되는거 아니냐?
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;string&amp;gt; int from = 0; int to = 3; int counter = from; class DtorRecursion { public: ~DtorRecursion() { if(counter &amp;lt; to) { line += &amp;quot;*&amp;quot;; printf(&amp;quot;%s\n&amp;quot;, line.</description></item><item><title>디버깅 포스트모템 - 박살난 소멸자</title><link>https://if1live.github.io/posts/buffer-overflow-broken-dtor-debugging-post-mortem/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/buffer-overflow-broken-dtor-debugging-post-mortem/</guid><description>개요 최근에 레거시 코드에 숨겨진 버퍼 오버플로우 버그를 잡느라고 하루를 날렸습니다. 찾고나니 간단한 버그였지만 하루씩이나 걸렸습니다. 버그를 잡은 다음에 생각하니 여러가지 요소가 결합되어서 디버깅이 오래 걸린거 같았습니다.
콜스택이 이상하게 나와서 버퍼 오버플로우 버그인지 감을 잡는데 오래 걸림 step in, step out, continue, next 이외의 디버거 기능을 안써봤다. 말로만 듣고 한번도 안써본 watchpoint 사용법을 찾아보는데 오래 걸림 gdb만 쓰다가 lldb를 처음 써봄. gdb와 lldb의 명령어는 다르다 버퍼 오버플로우 문제가 발생하는 가상 시나리오를 작성하고 이를 디버깅함으로써 나중에 같은 버그를 만났을때 빠르게 대응하는걸 목표로 디버깅 포스트모템을 작성해보았습니다.</description></item></channel></rss>