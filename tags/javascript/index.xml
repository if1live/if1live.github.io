<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on if1live space</title><link>https://if1live.github.io/tags/javascript/</link><description>Recent content in javascript on if1live space</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 07 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>타입스크립트의 배신 - property와 spread syntax</title><link>https://if1live.github.io/posts/betray-of-typescript-property-and-spread-syntax/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/betray-of-typescript-property-and-spread-syntax/</guid><description>준비물 property 자바스크립트의 class로 객체의 getter, setter 프로퍼티를 만들수 있다. class Rectangle { constructor(height, width) { this.height = height; this.width = width; } // Getter get area() { return this.calcArea(); } } spread syntax 자바스크립트에는 전개 구문,</description></item><item><title>타입스크립트 + Promise + async/await + Error = ???</title><link>https://if1live.github.io/posts/typescript-pitfall-of-promise-and-error/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/typescript-pitfall-of-promise-and-error/</guid><description>개요 타입스크립트는 좋은 언어다. 자바스크립트 짜듯이 코드를 짜도 되니까 쉽게 적응할 수 있다. 자바스크립트에서 실수하기 쉬운 타입 관련 문제를 타입스크립트 컴파</description></item><item><title>express에서 에러로 HTTP status code 통제하기</title><link>https://if1live.github.io/posts/express-error-and-http-status-code/</link><pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/express-error-and-http-status-code/</guid><description>throw new Error(&amp;lsquo;BadRequest&amp;rsquo;) 자바스크립트에서 Error를 던져서 에러 처리하는 것은 쉽고 간단한 방법이다. express에서도 마찬가지이다. Error를 던지면 200 OK가 아닌</description></item><item><title>월요일의 버그 - webpack-cli</title><link>https://if1live.github.io/posts/bug-of-monday-webpack-cli/</link><pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/bug-of-monday-webpack-cli/</guid><description>문제!!! 이번주 월요일(2019/06/24)에 webpack 빌드를 돌렸는데 webpack-cli 안에서 터졌다. if (!e &amp;&amp; fileOwnerId === process.getuid()) utimesSync(openCollectivePath, now, now); TypeError: process.getuid is not a function at e (\node_modules\webpack-cli\bin\cli.js:356:43) at FSReqWrap.oncomplete (fs.js:141:20) 금요일(2019/</description></item><item><title>관대한 코드는 쉽게 망가진다</title><link>https://if1live.github.io/posts/generous-code-breaks-easily/</link><pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/generous-code-breaks-easily/</guid><description>개요 KOCW를 통해서 집합론을 공부하기 시작했다. 동영상 강의 보기를 눌렀더니 크롬에서는 안돌아가더라. 액티브엑스 기반 강의라고 붙어있더니 역시나 크롬에서</description></item><item><title>yup로 입력 검증을 덜 귀찮게 처리하자</title><link>https://if1live.github.io/posts/yup-declarative-input-validation/</link><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/yup-declarative-input-validation/</guid><description>개요 프로그래머가 러스트, C#, 타입스크립트같은 타입 있는 언어로 코드를 짜면 컴파일러에 의해서 타입이 보장되니 런타임에서 문제가 생기지 않는다. 미개한 스크립트</description></item><item><title>자바스크립트에서 expect(-3 % 3).toEqual(3 % 3)가 실패하는 이유</title><link>https://if1live.github.io/posts/-3-mod-3-is-not-equal-to-3-mod-3-in-javascript/</link><pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/-3-mod-3-is-not-equal-to-3-mod-3-in-javascript/</guid><description>-3%3 과 3%3은 같은가? 얼마전에 코딩하다 밟은 버그에 대해서 이야기를 해본다. 자바스크립트로 미디어 플레이어의 플레이리스트를 구현하고 있었다. 플레이리스트</description></item></channel></rss>