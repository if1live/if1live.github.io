<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>debugging on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/debugging/</link><description>Recent content in debugging on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 17 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/debugging/index.xml" rel="self" type="application/rss+xml"/><item><title>디버깅 포스트모템 - 박살난 소멸자</title><link>https://if1live.github.io/posts/buffer-overflow-broken-dtor-debugging-post-mortem/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/buffer-overflow-broken-dtor-debugging-post-mortem/</guid><description>개요 최근에 레거시 코드에 숨겨진 버퍼 오버플로우 버그를 잡느라고 하루를 날렸습니다. 찾고나니 간단한 버그였지만 하루씩이나 걸렸습니다. 버그를 잡은 다음에 생각하니 여러가지 요소가 결합되어서 디버깅이 오래 걸린거 같았습니다.
콜스택이 이상하게 나와서 버퍼 오버플로우 버그인지 감을 잡는데 오래 걸림 step in, step out, continue, next 이외의 디버거 기능을 안써봤다. 말로만 듣고 한번도 안써본 watchpoint 사용법을 찾아보는데 오래 걸림 gdb만 쓰다가 lldb를 처음 써봄. gdb와 lldb의 명령어는 다르다 버퍼 오버플로우 문제가 발생하는 가상 시나리오를 작성하고 이를 디버깅함으로써 나중에 같은 버그를 만났을때 빠르게 대응하는걸 목표로 디버깅 포스트모템을 작성해보았습니다.</description></item></channel></rss>