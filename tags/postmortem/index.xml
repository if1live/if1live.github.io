<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>postmortem on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/postmortem/</link><description>Recent content in postmortem on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 08 Jan 2023 21:00:00 +0900</lastBuildDate><atom:link href="https://if1live.github.io/tags/postmortem/index.xml" rel="self" type="application/rss+xml"/><item><title>shiroko-kfcc 개발 포스트모템</title><link>https://if1live.github.io/posts/shiroko-kfcc-post-mortem/</link><pubDate>Sun, 08 Jan 2023 21:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/shiroko-kfcc-post-mortem/</guid><description>개요 shiroko-kfcc는 새마을금고의 예금, 적금 금리를 보려고 만든 서비스이다. 저장소 주소는 if1live/shiroko-kfcc이다. 이 글에서는 어쩌다 shiroko-kfcc를 만들게 되었는지와 어떻게 만들었는지를 간단하게 다룬다.
타임라인 2022/02: MVP 개발 2023/01/01 ~ 2023/01/02: 먼지 털기 2023/01/03 ~ 2023/01/04: shiroko-kfcc 개발 2023/01/05 ~ 2023/01/08: 사용성, SEO, CI, &amp;hellip; 개선 2022/02: 새마을금고 전체 금리를 보고 싶다 목돈이 생겨서 예금할 곳을 찾아보게 되었다. 은행 금리는 너무 낮으니까 적당한 새마을금고에 넣으려고 했다. 새마을금고 모바일앱 &amp;ldquo;MG더뱅킹&amp;quot;을 사용하면 다른 지역의 금고의 예금 상품에 가입할수 있다고 하더라.</description></item><item><title>Jupyter를 블로그에 적용하기</title><link>https://if1live.github.io/posts/apply-jupyter-into-blog/</link><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/apply-jupyter-into-blog/</guid><description>why jupyter? 얼마 전에 google colabratory 라는 서비스가 있다는 소리를 들었다. jupyter를 구글 서버 위에서 사용할 수 있다고 하더라.
jupyter라는게 있다는걸 이미 알고 있었지만 나는 문서 공유를 중요하게 생각해서 jupyter를 사용하지 않았다. 웹기반으로 만들어진 markdown 편집기 중에는 구글 드라이브를 저장소로 사용하는게 있다. 이런 툴을 사용하면 어떤 컴퓨터에서 작업하든 기존에 수정하던 문서를 이어서 편집할 수 있다. jupyter는 로컬에 설치해서 사용하는 프로그램이다보니 편집이 모든 환경에서 가능하지도 않고 문서 공유도 쉽지 않아 보이더라.</description></item><item><title>Unity Scene Web Exporter 개발 포스트모템</title><link>https://if1live.github.io/posts/unity-scene-web-exporter-post-mortem/</link><pubDate>Sun, 28 Aug 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/unity-scene-web-exporter-post-mortem/</guid><description>개요 Unity Scene Web exporter Live Demo 목적 : 오브젝트 배치를 유니티에서 하고싶다 개발 기간 : 2016년 3월 ~ 2016년 8월 언어 : 유니티 C# Unity3D / Three.js screenshot
Live Demo : Three.js
file=embed.html format=text 왜 시작했는가? 2015년 3월, WebVR boilerplate를 보고 감명받아서 회사 홈페이지를 VR로 만들었다. 회사 VR 홈페이지은 WebVR boilerplate를 기반으로 만들었는데 이것은 three.js 기반이다. 그래서 씬을 수정하는 작업(물체를 생성, 배치, 광원을 배치, 크기를 조절,&amp;hellip;)을 javascript로 한다.
// 회사 로고 var geometry = new THREE.</description></item><item><title>블로그를 Pelican에서 Hugo로 이사하기</title><link>https://if1live.github.io/posts/migration-from-pelican-to-hugo-post-mortem/</link><pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/migration-from-pelican-to-hugo-post-mortem/</guid><description>개요 pelican을 이용하는 블로그를 hugo 기반으로 바꾸기
기간 : 2016/02/?? ~ 2016/03/??, 2016/07/31 완료 주요 원인 pelican은 느리다 파이썬 2.x 는 도태된거같다 파이썬 3.x 의 호환성을 믿을 수 없다 Timeline pelican으로 만들어진 블로그를 hugo로 엎는거니까 pelican을 쓰는 동안의 기록을 정리해봤다. 3년동안 pelican 썻더니 재밌는 커밋이 많이 보이더라.
2013년 2월 28일 libsora.so 도메인을 등록했다. 블로그와 위키를 동시에 필요했기 때문에 dokuwiki를 사용했다.
2013년 5월 19일 기존에 사용하던 정책을 버리고 정적 사이트 생성기로 이사했다.</description></item><item><title>gksrmfdldkscuwudy 포스트모템</title><link>https://if1live.github.io/posts/gksrmfdldkscuwudy-post-mortem/</link><pubDate>Sun, 29 May 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/gksrmfdldkscuwudy-post-mortem/</guid><description>개요 개요: 알파벳-두벌식 변환기 개발기간: 2016/05/07 00:00 ~ 2016/05/07 02:00 (2시간) 사용언어: JavaScript 저장소: https://github.com/if1live/gksrmfdldkscuwudy 써보기: http://libsora.so/gksrmfdldkscuwudy/ 집에서 뒹굴고 있다가 떡밥이 나와서 자기전에 만들었다. (&amp;hellip;)
접근법1. 한글 오토마타 처음에는 오토마타를 이용해서 구현하려했다. 간단히 말해서 한글 입력기 비슷한걸 생각했다.
한글 오토마라를 적당히 준비한다. r를 입력하면 ㄱ를 오토마타로 전달한다. 한글 오토마타가 적당히 자모음을 조합해서 ㄱ를 출력한다. k를 입력하면 ㅏ를 오토마타로 전달한다. 한글 오토마타가 적당히 자모음을 조합해서 가를 출력한다. 적절히 위의 과정을 반복한다. 직접 구현하긴 귀찮아서 GitHub에서 hangul automata, javascript로 검색하니까 hangul-automata 나오더라.</description></item><item><title>Maya (Markdown 전처리기) 포스트모템</title><link>https://if1live.github.io/posts/maya-markdown-preprocessor-post-mortem/</link><pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/maya-markdown-preprocessor-post-mortem/</guid><description>Why? 2013년부터 2016년 2월까지 정적 사이트 생성기로 pelican을 썼다. 파이썬 3.x 시대가 열리면서 pelican에 대한 불만이 생겨서 hugo로 갈아탈 생각을 했다. (왜 pelican을 버리게 되었는지에 대한 자세한 내용은 여기서는 다루지 않는다) 그동안 pelican에 의존해서 작성된 문서를 hugo에서도 돌아가도록 고칠 도구가 필요해서 만들게 되었다.
언어 : golang 저장소 : github.com/if1live/maya 개발기간 : 2016/02/20 ~ 2016/03/11 적용사례 : libsora.so Feature 문서 메타데이터를 지원해야한다 Markdown는 일반 텍스트 문서의 양식을 편집하는 문법이다. 원래 일반 텍스트 문서를 다루는 용도라서 작성일, 작성자, 태그, 분류등의 정보가 들어갈 자리가 없다.</description></item><item><title>Twitter Image Archive 개발 포스트모템</title><link>https://if1live.github.io/posts/twitter-image-archive-post-mortem/</link><pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/twitter-image-archive-post-mortem/</guid><description>개요 트윗을 싹 지우고 싶다는 생각이 들었다. 트위터에는 개소리만 싸질렀지만 그래도 쓸만한 데이터를 얻을수 있지 않을까해서 백업을 하고 트윗을 지우기로 마음먹었다. 우선은 트위터에서 제공하는 아카이브를 받았다. 받은건 좋은데 여기에는 트윗 데이터(내가 쓴 트윗, RT한 트윗)만 남아있더라. 내가 업로드한 이미지나 리트윗한 이미지 자체를 아카이브에 포함되어있지 않고 링크만 있더라. 그래서 아카이브한 트윗 데이터에서 이미지 URL 정보를 전부 뽑아내서 다운받는 것을 만들기로 했다.
목표 : 트위터 아카이브의 모든 내용을 오프라인에서 볼수 있어야한다. (주로 이미지) 사용한 언어 : NodeJS 개발기간 2016/03/04 : 프로젝트 방향 결정 2016/03/05 : 실제 개발 어떻게 만들것인가?</description></item><item><title>printf("%s\n", NULL)의 출력 결과는?</title><link>https://if1live.github.io/posts/printf-with-null-post-mortem/</link><pubDate>Sun, 06 Mar 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/printf-with-null-post-mortem/</guid><description>떡밥의 시작 오늘도 평소와 똑같이 트위터는 인생의 낭비를 라는 명언대로 행동하다 재밌는 트윗을 봤다.
New Tweet &amp;ldquo;트위터만 보고 있지 말고 %s 해야지&amp;rdquo; @_Yous
트윗을 보자마자 %s에다가 NULL을 넣어보았다.
New Tweet &amp;ldquo;트위터만 보고 있지 말고 %s 해야지&amp;rdquo;, NULL @if1live
트윗을 쓰고 나니 옛날에 비슷한걸 해본적이 생각났다. 그러고보니 printf(%s”, NULL) 해도 프로그램이 안뒤졌던거같은 기분이 드는데? 그래서 직접 돌려봤다.
#include &amp;lt;stdio.h&amp;gt; int main() { printf(&amp;quot;string = %s\n&amp;quot;, NULL); return 0; } $ clang simple.</description></item><item><title>디버깅 포스트모템 - 박살난 소멸자</title><link>https://if1live.github.io/posts/buffer-overflow-broken-dtor-debugging-post-mortem/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/buffer-overflow-broken-dtor-debugging-post-mortem/</guid><description>개요 최근에 레거시 코드에 숨겨진 버퍼 오버플로우 버그를 잡느라고 하루를 날렸습니다. 찾고나니 간단한 버그였지만 하루씩이나 걸렸습니다. 버그를 잡은 다음에 생각하니 여러가지 요소가 결합되어서 디버깅이 오래 걸린거 같았습니다.
콜스택이 이상하게 나와서 버퍼 오버플로우 버그인지 감을 잡는데 오래 걸림 step in, step out, continue, next 이외의 디버거 기능을 안써봤다. 말로만 듣고 한번도 안써본 watchpoint 사용법을 찾아보는데 오래 걸림 gdb만 쓰다가 lldb를 처음 써봄. gdb와 lldb의 명령어는 다르다 버퍼 오버플로우 문제가 발생하는 가상 시나리오를 작성하고 이를 디버깅함으로써 나중에 같은 버그를 만났을때 빠르게 대응하는걸 목표로 디버깅 포스트모템을 작성해보았습니다.</description></item><item><title>Doge Math 개발 포스트모템</title><link>https://if1live.github.io/posts/doge-math-post-mortem/</link><pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/doge-math-post-mortem/</guid><description>개요 2015/09/07 ~ 2015/09/12 동안 뻘짓 개발한 개인 플젝을 정리하기로 했다. 지금까지는 개인 프로젝트에 대해서 기록을 남기지 않았지만 이번에는 몇가지 이유로 기록을 남겨볼까한다.
짜잘하게 만든게 많으니까 나중에 뭘 만들었는지도 기억이 나지 않더라 (&amp;hellip;.) 옛날에 분명 삽질했던건데 기억이 안나서 또 삽질했다 (&amp;hellip;) 참고용 링크만 있어도 두번 삽질하는 일은 없을거다. 간단한걸 만들었지만 생각보다 참고한게 많았다. 적어도 &amp;ldquo;헬로월드를 짰다. 재밌었다.&amp;rdquo; 수준의 포스트모템은 안나오겠더라. 이런거라도 안쓰면 글을 쓸 이유가 없다 (&amp;hellip;) 이번에 만든 것은 doge-math이다.</description></item></channel></rss>