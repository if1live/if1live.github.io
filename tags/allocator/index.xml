<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>allocator on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/allocator/</link><description>Recent content in allocator on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Fri, 25 Jan 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/allocator/index.xml" rel="self" type="application/rss+xml"/><item><title>Box2d Block Allocator</title><link>https://if1live.github.io/posts/box2d-block-allocator/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/box2d-block-allocator/</guid><description>작은크기의 객체를 많이 할당할때 사용되는 할당자이다. 기본설정값의 경우, 대략 640byte보다 작은 메모리를 많이 요청할때 사용한다
기본 구조 Chunk, Block의 2가지 개념으로 나누어서 메모리를 관리한다. Chunk는 16kb(기본값)을 하나의 크기로 가짆다. Chunk는 하나의 거대한 메모리 덩어리이고 이를 적절히 block이라든 작은 단위로 잘라서 사용한다.
메모리를 몇 byte로 요청하든간에 정해진 크기의 메모리로 할당한다. 같은 크기의 메모리블럭을 모아서 관리하기 위한 편법으로 이를 채택한듯하다. 허용 가능한 메모리 할당 크기는 s_blockSizes에 정의되어잇다. 16, 13, 64, &amp;hellip;.640 등이 가능하다.</description></item><item><title>Box2d Stack Allocator</title><link>https://if1live.github.io/posts/box2d-stack-allocator/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/box2d-stack-allocator/</guid><description>구조 고정크기로 b2_stackSize(기본값 100kb)의 메모리를 가지고 이것을 맨앞부터 쪼개서(그래서 스택기반) 사용하는 할당자이다. 구조가 단순한만큼 빠르다. 초기화에서 한번에 여러개를 할당하고 몰아서 해제하는 객체 로딩같은곳에서 사용 가능할듯하다.
할당한 순서와 정확히 반대로 해제해야 정상 작동한다. (그래야 스택답지)
const int32 b2_stackSize = 100 * 1024; // 100k const int32 b2_maxStackEntries = 32; struct b2StackEntry { char* data; int32 size; bool usedMalloc; }; Stack Allocator안에는 100kb의 고정크기배열이 내장되어잇다. 사용자가 메모리를 요청하면 이를 쪼개서 반환한다. 만약 메모리가 딸리면 시스템 Malloc로 추가 메모리를 할당한다.</description></item></channel></rss>