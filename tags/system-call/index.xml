<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>system call on /usr/lib/libsora.so</title><link>https://if1live.github.io/tags/system-call/</link><description>Recent content in system call on /usr/lib/libsora.so</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 22 Nov 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://if1live.github.io/tags/system-call/index.xml" rel="self" type="application/rss+xml"/><item><title>System Calls</title><link>https://if1live.github.io/posts/system-prog-system-call/</link><pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-prog-system-call/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 앞으로 없다.
System Call System Call Principles 어플리케이션과 하드웨어 사이에 별도의 레이어를 끼워넣는다 프로그래밍 하기 쉽다 하드웨어 장치의 low-level 프로그래밍 특징을 몰라도 된다. 시스템 보안 향상 커널은 인터페이스 레벨에서 요청이 올바른지 확인할 수 있다 sys call == 커널과 소통하는 유일한 통로 프로그램 이식성 향샹 System calls 유저 모드 프로세스 - 하드웨어 장치 사이의 인터페이스 커널 서비스를 요청 POSIX APIs and System calls API (Application Programming Interface) 주어진 서비스를 구하는 방법을 지정하는 함수 정의 ex) POSIX API인 malloc(), calloc(), free()는 libc안에 brk() system call로 구현되어 있다.</description></item></channel></rss>