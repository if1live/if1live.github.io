<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on if1live space</title><link>https://if1live.github.io/posts/</link><description>Recent content in Posts on if1live space</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Mon, 10 Jul 2023 00:01:00 +0900</lastBuildDate><atom:link href="https://if1live.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>방송대 포스트모템 - 전공</title><link>https://if1live.github.io/posts/knou-post-mortem-4-major/</link><pubDate>Mon, 10 Jul 2023 00:01:00 +0900</pubDate><guid>https://if1live.github.io/posts/knou-post-mortem-4-major/</guid><description>주의 이번 글은 주관적인 내용이다. 글쓰기 어려운 주제라서 쓸까 말까 고민했는데 시간차를 두고 학사 두 번 해봐야 보이는 주제같아서 써본다. 내가 하는 말이 틀렸다고 생</description></item><item><title>방통대 포스트모템 - 비용</title><link>https://if1live.github.io/posts/knou-post-mortem-3-cost/</link><pubDate>Sun, 09 Jul 2023 00:01:00 +0900</pubDate><guid>https://if1live.github.io/posts/knou-post-mortem-3-cost/</guid><description>개요 이번 주제는 졸업까지 들어간 비용이다. 무엇을 배웠는지에 대해서 생각하는것도 중요하지만 얼마를 썻는지 역시 중요하다. 개발자 부트캠프의 교육비와 관련된 논</description></item><item><title>방통대 포스트모템 - 타임라인</title><link>https://if1live.github.io/posts/knou-post-mortem-2-timeline/</link><pubDate>Sat, 08 Jul 2023 00:02:00 +0900</pubDate><guid>https://if1live.github.io/posts/knou-post-mortem-2-timeline/</guid><description>개요 오프라인 대학교를 다닐때는 공부만 하니까 복잡한 일이 벌어지지 않았다. 방통대를 다니는 동안에는 회사도 다녀서 많은 일이 있었다. 그리고 회사조차 남들이 웬만</description></item><item><title>방통대 포스트모템 - 동기</title><link>https://if1live.github.io/posts/knou-post-mortem-1-reason-i-applied/</link><pubDate>Sat, 08 Jul 2023 00:01:00 +0900</pubDate><guid>https://if1live.github.io/posts/knou-post-mortem-1-reason-i-applied/</guid><description>경제학과 졸업 가능 2021년 1학기에 한국방송통신대학교 경제학과로 3학년 편입했다. 그리고 2023년 7월 7일, 드디어 졸업가능 여부가 가능이 되었다. 졸</description></item><item><title>lodash 탈출기 - remeda의 틈을 막아라</title><link>https://if1live.github.io/posts/escape-from-lodash-just/</link><pubDate>Sat, 17 Jun 2023 00:02:00 +0900</pubDate><guid>https://if1live.github.io/posts/escape-from-lodash-just/</guid><description>개요 이전 글에서 lodash를 remeda로 교체한 이야기를 했다. 그리고 remeda가 lodash를 100% 대체할 수 없다는 것도 언급했다. 이번 글에서는 r</description></item><item><title>lodash 탈출기 - lodash의 대안과 결정</title><link>https://if1live.github.io/posts/escape-from-lodash-remeda/</link><pubDate>Sat, 17 Jun 2023 00:01:00 +0900</pubDate><guid>https://if1live.github.io/posts/escape-from-lodash-remeda/</guid><description>개요 이전 글에서 lodash를 탈출하게된 동기를 다뤘다. 이번에는 검토해 본 후보들과 선택되지 않은 이유, 최종 선택을 다룬다. 요구사항 (A) 타입스크립트로 작성</description></item><item><title>lodash 탈출기 - 왜 lodash에서 벗어나는가?</title><link>https://if1live.github.io/posts/escape-from-lodash-why-i-escape/</link><pubDate>Sat, 17 Jun 2023 00:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/escape-from-lodash-why-i-escape/</guid><description>lodash를 2023년까지 쓰게된 이유 내가 웹개발로 처음 먹고 살기 시작한건 2010년이다. IE 6,7,8을 전부 지원해야되는 시절이었다. 그때 그 시절 자</description></item><item><title>serverless-offline 없이 AWS Lambda 함수를 로컬에서 실행하는 방법</title><link>https://if1live.github.io/posts/emulate-aws-lambda-function-locally-without-serverless-offline/</link><pubDate>Thu, 30 Mar 2023 20:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/emulate-aws-lambda-function-locally-without-serverless-offline/</guid><description>serverless-offline: 장점 Serverless Offline는 AWS Lambda에 배포하지 않고 함수를 로컬호스트에서 테스트해볼수 있는 좋은 툴이다. serverless offline 문서에 의하면 Node.js, Python, Ruby, Go, Java을 테스트</description></item><item><title>타입스크립트 interface에 정적 함수, 타입 끼워넣기</title><link>https://if1live.github.io/posts/inject-static-method-into-typescript-interface/</link><pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/inject-static-method-into-typescript-interface/</guid><description>요구 사항 인터페이스에 정적 함수를 넣고 싶다. interface A { x: number; // compile error static add(data: A, input: number) { return data.x &amp;#43; input; } } Add support Interfaces to define static methods #13462 타입스크립트 interface에 정적 함수를 넣</description></item><item><title>타입스크립트의 배신 - property와 spread syntax</title><link>https://if1live.github.io/posts/betrayal-of-typescript-property-and-spread-syntax/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/betrayal-of-typescript-property-and-spread-syntax/</guid><description>준비물 property 자바스크립트의 class로 객체의 getter, setter 프로퍼티를 만들수 있다. class Rectangle { constructor(height, width) { this.height = height; this.width = width; } // Getter get area() { return this.calcArea(); } } spread syntax 자바스크립트에는 전개 구문,</description></item><item><title>2016년 hugo를 2023년 hugo로 마이그레이션 하기</title><link>https://if1live.github.io/posts/migration-hugo-from-2016-to-2023/</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/migration-hugo-from-2016-to-2023/</guid><description>계기 몇 개월 전에 구글 애널리스틱에 접속했더니 아래와 같은 경고가 떳다. 유니버설 애널리틱스는 2023년 7월 1일부터 표준 속성의 신규 데이터를 더 이상 처리하지</description></item><item><title>shiroko-kfcc 개발 포스트모템</title><link>https://if1live.github.io/posts/shiroko-kfcc-post-mortem/</link><pubDate>Sun, 08 Jan 2023 21:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/shiroko-kfcc-post-mortem/</guid><description>개요 shiroko-kfcc는 새마을금고의 예금, 적금 금리를 보려고 만든 서비스이다. 저장소 주소는 if1live/shiroko-kfcc이다. 이</description></item><item><title>TypeORM과 Knex 같이 쓰기</title><link>https://if1live.github.io/posts/typeorm-knex-integration/</link><pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/typeorm-knex-integration/</guid><description>요구사항 데이터베이스가 없는 백엔드는 상상하기 어렵다. 프로젝트에서 데이터베이스, 그중에서도 RDBMS를 쓰게 된다면 query builder, ORM 같은 물건을 피할 수 없다. 이 글</description></item><item><title>JWT를 사용해서 server-to-server API 없애는 안티패턴</title><link>https://if1live.github.io/posts/anti-pattern-using-jwt-to-remove-server-to-server-api/</link><pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/anti-pattern-using-jwt-to-remove-server-to-server-api/</guid><description>오늘 SNS에서 JWT, OAuth, access token, refresh token에 대해서 이야기하는걸 봤다. 나는 보안에 대해서는 무식해서 OAuth, access token, refresh token 로는 아무 이야기도 할 수 없다. 하지만 JWT로는 어</description></item><item><title>serverless 배포하기 (5) 최소한의 설정파일로 타입스크립트 함수 배포하기</title><link>https://if1live.github.io/posts/deploying-serverless-5-zero-configuration/</link><pubDate>Sat, 20 Aug 2022 23:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-5-zero-configuration/</guid><description>이전글에서는 빌드, 패키징 과정을 직접 제어해서 serverless plugin을 사용하지 않고 람다로 배포해보았다. 패키징 과정을 직접 제어할수 있으면 많은걸 할 수 있지만 이것</description></item><item><title>serverless 배포하기 (4) 플러그인 안쓰고 타입스크립트 함수 배포하기</title><link>https://if1live.github.io/posts/deploying-serverless-4-pnpm-with-script/</link><pubDate>Sat, 20 Aug 2022 20:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-4-pnpm-with-script/</guid><description>이전글에서는 serverless-webpack 를 사용했을때 발생할 수 있는 문제를 다뤘다. 이번에는 serverless-webpack같은 플러그인을 쓰지 않고 serverless framework만</description></item><item><title>타입스크립트 + Promise + async/await + Error = ???</title><link>https://if1live.github.io/posts/typescript-pitfall-of-promise-and-error/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/typescript-pitfall-of-promise-and-error/</guid><description>개요 타입스크립트는 좋은 언어다. 자바스크립트 짜듯이 코드를 짜도 되니까 쉽게 적응할 수 있다. 자바스크립트에서 실수하기 쉬운 타입 관련 문제를 타입스크립트 컴파</description></item><item><title>serverless 배포하기 (3) serverless-webpack의 결함</title><link>https://if1live.github.io/posts/deploying-serverless-3-flaw-of-serverless-webpack/</link><pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-3-flaw-of-serverless-webpack/</guid><description>이전글에서는 serverless-webpack 기반으로 배포 패키지 크기를 줄여봤다. 3부에서는 serverless-webpack의 결함을 다룬다. 작성일 기준으로 최신 버전은 5.5.1 이다</description></item><item><title>serverless 배포하기 (2) serverless-webpack 기반으로 배포 패키지 크기 줄이기</title><link>https://if1live.github.io/posts/deploying-serverless-2-serverless-webpack-advance/</link><pubDate>Sun, 01 Aug 2021 23:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-2-serverless-webpack-advance/</guid><description>이전글에서는 serverless-webpack를 사용해서 람다 배포하는걸 다뤘다. 배포 패키지의 크기는 21.18 MB (21,685KB) 였다. 2부에서는 배포 패키지 크기를 줄이</description></item><item><title>serverless 배포하기 (1) serverless-webpack 초급</title><link>https://if1live.github.io/posts/deploying-serverless-1-serverless-webpack-beginning/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/deploying-serverless-1-serverless-webpack-beginning/</guid><description>why serverless-framework? 웹 콘솔을 통해서 AWS Lambda 함수를 만들고 코드를 고칠 수 있다. SQS로 람다를 트리거해서 SES를 통해 이메일 보내는 기능은 웹콘솔로도 충분히 작성할 수 있을 것이다</description></item><item><title>2021년에 하는 2020년 회고</title><link>https://if1live.github.io/posts/review-year-2020/</link><pubDate>Sat, 02 Jan 2021 02:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/review-year-2020/</guid><description>개요 2020년 회고를 2020년에 쓰고 싶었지만 강요되지 않는 마감은 지키기 어렵다. 아무것도 안쓰고 넘어가면 재미없으니 회고를 빌미로 뻘글이나 써보자. Smash Legends</description></item><item><title>2020년식으로 블로그 빌드 고치기</title><link>https://if1live.github.io/posts/migration-blog-2020/</link><pubDate>Sat, 14 Nov 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/migration-blog-2020/</guid><description>dep -&amp;gt; Go Modules golang의 패키지 관리자는 golang이 만들어진 이후 몇 년동안 개판이었다. 얼마나 개판이었는지는 golang PackageManagementT</description></item><item><title>DBML: Database Markup Language</title><link>https://if1live.github.io/posts/dbml-entity-relation-diagram-as-code/</link><pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/dbml-entity-relation-diagram-as-code/</guid><description>개요 IaC (Infrastructure as Code) 뽕을 맞은 이후로는 될 수 있는한 많은 것을 코드로 표현하려고 노력했다. ERD (Entity-relation diagram)도 코드로 표현하고 싶었던 물건이다. 마우스로 ERD 그리는</description></item><item><title>mermaid: diagram as code</title><link>https://if1live.github.io/posts/mermaid-diagram-as-code/</link><pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/mermaid-diagram-as-code/</guid><description>개요 UML 사용하면 글로만 이야기하는 것보다 편리하다. 하지만 UML을 마우스로 그리는건 매우 피곤하고 유지보수 하기 어렵다. 마우스로 그림 그리는 도구는 나중에 변</description></item><item><title>callbackWaitsForEmptyEventLoop와 AWS Lambda의 함정</title><link>https://if1live.github.io/posts/trap-callback-waits-for-empty-event-loop/</link><pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/trap-callback-waits-for-empty-event-loop/</guid><description>개요 요새 typescript + express 백엔드를 짠다. 운영에 대해서는 조금도 생각하기 싫어서 AWS Lambda로 배포한다. serverless-http라는 좋은 물건을 쓰면 ex</description></item><item><title>타입스크립트로 API 명세 작성하고 서버/클라 stub 생성하기</title><link>https://if1live.github.io/posts/stub-from-typescript-api-specification/</link><pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/stub-from-typescript-api-specification/</guid><description>개요 얼마전에 백엔드/프론트엔드로 구성된 운영툴을 짰다. 백엔드는 typescript + express로 굴러간다. 프론트엔드는 typescript + react로 굴러간다. 양쪽을 같은 언</description></item><item><title>express에서 콘솔로 찍은 로그를 HTTP 응답에 붙이기</title><link>https://if1live.github.io/posts/express-attach-console-log-to-response/</link><pubDate>Sat, 11 Jul 2020 00:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/express-attach-console-log-to-response/</guid><description>HTTP 응답에 콘솔 로그 붙인 이유 간단한 express 서버가 있다고 치자. const express = require(&amp;#39;express&amp;#39;); const delay = require(&amp;#39;delay&amp;#39;); const app = express(); app.get(&amp;#39;/&amp;#39;, async (req, res) =&amp;gt; { const data = await execute(req.query || {}); res.json(data); }); async function execute(input) { const id = input.id; console.info(`before delay: ${id}`); await delay(100); console.warn(`after delay: ${id}`); return {</description></item><item><title>typeorm에서 repository.save() 호출할때 UPDATE 쿼리만 사용하기</title><link>https://if1live.github.io/posts/typeorm-entity-proxy-for-save/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/typeorm-entity-proxy-for-save/</guid><description>repository.save() 의 함정 typeorm으로 아래와 같은 엔티티를 정의했다고 치자. @Entity() export class UserEntity { @PrimaryColumn() key1: string; @PrimaryColumn() key2: string; @Column() data: string; } 엔티티를 살짝 고쳐서 저장하자.repository.</description></item><item><title>ioredis에 로깅 끼워넣기</title><link>https://if1live.github.io/posts/ioredis-logging-with-monkey-patch/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/ioredis-logging-with-monkey-patch/</guid><description>로깅의 필요성 요새 작업하고 있는 프로젝트에서 typeorm과 ioredis를 쓰고 있다. 기능이 검증된 코드를 짜기 위해서 유닛 테스트를 도배하고 있다. 하지</description></item><item><title>타입스크립트와 호이스팅</title><link>https://if1live.github.io/posts/typescript-and-hoisting/</link><pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/typescript-and-hoisting/</guid><description>타입스크립트에는 union type이 있다. 타입스크립트는 매우 좋은 언어라서 분기를 적절히 처리해주면 union type의 특정 타입으로 한정할 수 있다. 아래의 코드는 string |</description></item><item><title>나의 백엔드 배포 환경 정책</title><link>https://if1live.github.io/posts/my-backend-deployment-environment-policy/</link><pubDate>Thu, 02 Jan 2020 00:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/my-backend-deployment-environment-policy/</guid><description>배포 환경(Development environment)은 목적에 따라서 각각 다른 스테이지로 소프트웨어 배포하는걸 말한다. 예시로 설명하면 쉬운데 말로</description></item><item><title>serverless framework plugins</title><link>https://if1live.github.io/posts/serverless-framework-plugins/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/serverless-framework-plugins/</guid><description>개요 serverless framework은 aws lambda 같은 서버리스 플랫폼에 배포할때 유용한 도구이다. 하지만 serverless framework를 그대로 쓰는건 불편하다. 다행히도 serv</description></item><item><title>2019년 마무리</title><link>https://if1live.github.io/posts/review-year-2019/</link><pubDate>Sun, 29 Dec 2019 02:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/review-year-2019/</guid><description>내 경력은 계산하기 매우 쉽다. 2010년 1월 2일에 처음 출근했다. 그리고 다음 주에는 2020년 1월 2일이 있다. 벌써 경력 10년차라니&amp;hellip; 그</description></item><item><title>타입스크립트와 순환 의존성</title><link>https://if1live.github.io/posts/typescript-and-circular-dependency/</link><pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/typescript-and-circular-dependency/</guid><description>타입스크립트와 순환 의존성 circular dependency(순환 의존성, circular reference, 순환 참조)는 대부분의 언어에서 발생시킬 수 있는 문제이다. C 에서도 circular dependency 문제가 있다.</description></item><item><title>NetFUNNEL 우회하기</title><link>https://if1live.github.io/posts/bypass-netfunnel/</link><pubDate>Sat, 21 Sep 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/bypass-netfunnel/</guid><description>개요 서민형 안심전환대출 신청하게 되었다. 신청하러 들어갔더니 대기 페이지가 뜨더라. 기다리는 것보다 뜯어서 우회하는게 빠를거같더라. 나는 인내심이 없는 인간</description></item><item><title>express에서 에러로 HTTP status code 통제하기</title><link>https://if1live.github.io/posts/express-error-and-http-status-code/</link><pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/express-error-and-http-status-code/</guid><description>throw new Error(&amp;lsquo;BadRequest&amp;rsquo;) 자바스크립트에서 Error를 던져서 에러 처리하는 것은 쉽고 간단한 방법이다. express에서도 마찬가지이다. Error를 던지면 200 OK가 아닌</description></item><item><title>GraphQL에서는 어떤 HTTP status code를 사용할까?</title><link>https://if1live.github.io/posts/graphql-http-status-code/</link><pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/graphql-http-status-code/</guid><description>아무도 관심갖지 않는 GraphQL 이야기 나는 2015년에 GraphQL이 무것인지에 처음 들었다. 2016년에 기어VR 앱스토어를 뜯으면서 페이스북이 구현한 GrapQL AP</description></item><item><title>Jest 탈출기 - 타입스크립트 + Mocha</title><link>https://if1live.github.io/posts/escape-from-jest-mocha-with-typescript/</link><pubDate>Wed, 03 Jul 2019 01:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/escape-from-jest-mocha-with-typescript/</guid><description>개요 Jest 탈출기 - Jest는 느리다, Jest 탈출기 - Mocha를 쓰자에서는 자바스크립트 기준으로 예제를 작성했다. 하지만 실제로 내가 쓰는 언어는 타입스크립트이</description></item><item><title>Jest 탈출기 - Mocha를 쓰자</title><link>https://if1live.github.io/posts/escape-from-jest-use-mocha/</link><pubDate>Tue, 02 Jul 2019 01:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/escape-from-jest-use-mocha/</guid><description>개요 이전에 Jest 탈출기 - Jest는 느리다를 썼다. 이를 통해 jest를 탈출해서 mocha로 넘어가기로 마음먹었다. jest는 느린거 빼곤 문제가 없다. CI</description></item><item><title>Jest 탈출기 - Jest는 느리다</title><link>https://if1live.github.io/posts/escape-from-jest-jest-is-slow/</link><pubDate>Mon, 01 Jul 2019 01:00:00 +0900</pubDate><guid>https://if1live.github.io/posts/escape-from-jest-jest-is-slow/</guid><description>개요 요새 작업하는 프로젝트에서 jest를 사용해서 유닛테스트를 돌린다. 프로젝트가 진행될수록 테스트가 점점 느려지더니 이제 유닛 테스트 한번 돌리는데 1분이</description></item><item><title>타입 안전한 express 앱 구현하기</title><link>https://if1live.github.io/posts/make-typesafe-express-app/</link><pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/make-typesafe-express-app/</guid><description>개요 import express from &amp;#39;express&amp;#39;; const app = express(); app.get(&amp;#39;/sum&amp;#39;, (req, res) =&amp;gt; { const a = parseInt(req.query.a, 10); const b = parseInt(req.query.b, 10); if (isNaN(a)) { throw new Error(&amp;#39;not a number&amp;#39;); } if (isNaN(b)) { throw new Error(&amp;#39;not a number&amp;#39;); } const result = a &amp;#43; b; res.json({ result }); }); const port = 5000; app.listen(port, () =&amp;gt; console.log(`running 127.0.0.1:${port}`)); 위의 코드는 express, 타입</description></item><item><title>월요일의 버그 - webpack-cli</title><link>https://if1live.github.io/posts/bug-of-monday-webpack-cli/</link><pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/bug-of-monday-webpack-cli/</guid><description>문제!!! 이번주 월요일(2019/06/24)에 webpack 빌드를 돌렸는데 webpack-cli 안에서 터졌다. if (!e &amp;&amp; fileOwnerId === process.getuid()) utimesSync(openCollectivePath, now, now); TypeError: process.getuid is not a function at e (\node_modules\webpack-cli\bin\cli.js:356:43) at FSReqWrap.oncomplete (fs.js:141:20) 금요일(2019/</description></item><item><title>10년이면 강산도 변한다. 그리고 자바스크립트도</title><link>https://if1live.github.io/posts/in-ten-years-strong-mountains-will-change-and-javascript/</link><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/in-ten-years-strong-mountains-will-change-and-javascript/</guid><description>얼마전에 구버전 IE에서만 돌아가는 코드를 밟아서 글을 썼다. 글을 쓰다가가 옛날에 밟은 IE 구버전과 관련된 재밌는 코드가 생각났다. 그래서 옛날 이야기를 하나 더 써</description></item><item><title>관대한 코드는 쉽게 망가진다</title><link>https://if1live.github.io/posts/generous-code-breaks-easily/</link><pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/generous-code-breaks-easily/</guid><description>개요 KOCW를 통해서 집합론을 공부하기 시작했다. 동영상 강의 보기를 눌렀더니 크롬에서는 안돌아가더라. 액티브엑스 기반 강의라고 붙어있더니 역시나 크롬에서</description></item><item><title>타입스크립트에서 절대경로 쓰기</title><link>https://if1live.github.io/posts/use-absolute-path-in-typescript/</link><pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/use-absolute-path-in-typescript/</guid><description>개요 요새 타입스크립트를 쓰고있다. 100줄짜리 프로그램 짜는게 아니니 소스파일이 수십개로 나뉘어져있다. 파일에 접근하기 위해서는 디렉토리 구조도 몇단계로</description></item><item><title>HTTP 요청에 body를 붙여서 보내면 어떤 일이 벌어질까? part 2</title><link>https://if1live.github.io/posts/http-request-with-body-and-java-httpurlconnection/</link><pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/http-request-with-body-and-java-httpurlconnection/</guid><description>삽질의 시작 이전에 HTTP GET 요청에 body를 붙여서 보내면 어떤 일이 벌어질까?를 썼다. 나중에 자바의 HttpURLConnection의 동작이 안드로이드 버</description></item><item><title>사람 생각하는건 비슷하다</title><link>https://if1live.github.io/posts/peoples-thoughts-are-similar/</link><pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/peoples-thoughts-are-similar/</guid><description>최근에 클라이언트-서버 웹 앱 만들기 - 자바와 자바스크립트로 배우는 모던 웹 앱 개발이라는 책을 읽었다. 도서관 돌아다니다보니 손에 잡혀서 읽어봤다. 8장 API 디자</description></item><item><title>yup로 입력 검증을 덜 귀찮게 처리하자</title><link>https://if1live.github.io/posts/yup-declarative-input-validation/</link><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/yup-declarative-input-validation/</guid><description>개요 프로그래머가 러스트, C#, 타입스크립트같은 타입 있는 언어로 코드를 짜면 컴파일러에 의해서 타입이 보장되니 런타임에서 문제가 생기지 않는다. 미개한 스크립트</description></item><item><title>HTTP GET 요청에 body를 붙여서 보내면 어떤 일이 벌어질까?</title><link>https://if1live.github.io/posts/http-get-request-with-body-and-http-library/</link><pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/http-get-request-with-body-and-http-library/</guid><description>삽질의 시작 요새 유니티로 게임을 만들고 있다. 나는 서버쪽을 작업하고 있다. 서버는 HTTP 기반으로 구현하고 있다. 실시간 통신이 필요없으면 HTTP 쓰는게 편하잖아? RESTful API</description></item><item><title>django를 관리툴로 쓰자</title><link>https://if1live.github.io/posts/use-django-as-admin-tool/</link><pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/use-django-as-admin-tool/</guid><description>개요 서비스를 개발하다보면 어떤 식으로든 어드민 툴이 필요해진다. 간단한 게시판을 만든다고 생각하자. 관리자의 업무중에는 게시판의 스팸글을 지우는게 있을 것이</description></item><item><title>나는 글을 쓰는게 어렵다</title><link>https://if1live.github.io/posts/writing-article-is-hard/</link><pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/writing-article-is-hard/</guid><description>2018년 12월 말의 풍경이 생각난다. 트위터에서 많은 사람들이 &amp;ldquo;2018년 회고&amp;quot;라는 글을 쓰더라. 트위터만이 아니다. 2018</description></item><item><title>로그 파일은 좋다</title><link>https://if1live.github.io/posts/log-file-is-good/</link><pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/log-file-is-good/</guid><description>개요 예전에 재밌는 버그를 밟은적 있다. 코드는 아래와 같이 굴러갔다. 요청이 들어오면 transaction 시작. 요청이 들어오면 트랜잭션이 시작되도록 프레임웍이 구현되어 있었다</description></item><item><title>로그는 무죄</title><link>https://if1live.github.io/posts/log-file-is-not-guilty/</link><pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/log-file-is-not-guilty/</guid><description>수정 내역 2019/01/06: 작성 2019/01/07: 게시 중단</description></item><item><title>자바스크립트에서 expect(-3 % 3).toEqual(3 % 3)가 실패하는 이유</title><link>https://if1live.github.io/posts/-3-mod-3-is-not-equal-to-3-mod-3-in-javascript/</link><pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/-3-mod-3-is-not-equal-to-3-mod-3-in-javascript/</guid><description>-3%3 과 3%3은 같은가? 얼마전에 코딩하다 밟은 버그에 대해서 이야기를 해본다. 자바스크립트로 미디어 플레이어의 플레이리스트를 구현하고 있었다. 플레이리스트</description></item><item><title>OMR카드와 2진법</title><link>https://if1live.github.io/posts/omr-and-binary-number-system/</link><pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/omr-and-binary-number-system/</guid><description>다들 중, 고등학교때 OMR 카드를 봤을 것이다. 중, 고등학교때 중복답안이 존재하는 문제도 풀어봤을 것이다. 그리고 채점 결과를 받아봤을 것이다. 그것을 보면 자신이</description></item><item><title>타입스크립트에서 if문 안에 promise가 들어가는 문제 피하기</title><link>https://if1live.github.io/posts/prevent-bug-by-if-statement-with-promise/</link><pubDate>Sat, 13 Oct 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/prevent-bug-by-if-statement-with-promise/</guid><description>async function + if 옛날 옛적 미개한 자바스크립트에는 콜백뿐이었다. 나중에 promise가 추가되서 좋아졌다. 더 나중에 async/await가 추가되서 더 좋아졌</description></item><item><title>실제 사례로 보는 warning.or.kr part 2</title><link>https://if1live.github.io/posts/warning-or-kr-in-real-case-2/</link><pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/warning-or-kr-in-real-case-2/</guid><description>개요 2018년 10월 9일, mobile.twitter.com 이 warning.or.kr 당했다. 그리고 몇시간 뒤에 차단이 해제되었다. 물 들어올때 노 저으라는 말이 있다. 현실 세계에 차단 이벤트가 발생했으니 귀찮</description></item><item><title>나머지 연산자 없이 x % (2의 거듭제곱) 계산하기</title><link>https://if1live.github.io/posts/use-bit-op-as-mod-operator/</link><pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/use-bit-op-as-mod-operator/</guid><description>이전에 나머지 연산자 없이 x % 256 계산하기라는 글을 썻다. % 256만 계산할 수 있으면 재미없으니까 더 확장해보자. % 256을 구하기 위해서 캐스팅을 이용했다.</description></item><item><title>나머지 연산자 없이 x % 256 계산하기</title><link>https://if1live.github.io/posts/use-casting-as-mod-operator/</link><pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/use-casting-as-mod-operator/</guid><description>1년전, 2017년 8월 16일에 재밌는 생각이 나서 트윗을 쓴게 있다. a%256 최적화 하기 : (int)(unsigned char)a clang 기준 -O3 옵션 주면 어셈 한줄 https://twitter.com/if1live/status/897752172040929280 C에서 타입 캐스팅을 캐스팅 연산자라고</description></item><item><title>-4 % 3 = ?</title><link>https://if1live.github.io/posts/sign-of-mod-operator/</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/sign-of-mod-operator/</guid><description>% 연산자를 응용해보는 글을 쓰기전에 % 연산자에 대해서 간단하기 글을 써보기로 했다. % 는 나머지 연산자로4 % 3 을 계산하면 1이 나온다는건 다들 알고있을거다.</description></item><item><title>윈도우에서 심볼릭 링크 만들기</title><link>https://if1live.github.io/posts/ntfs-symbolic-link/</link><pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/ntfs-symbolic-link/</guid><description>왜 윈도우에서 심볼릭 링크를 만드나? 옛날 옛적에는 컴퓨터를 하다가 상태가 안좋아진거 같으면 포맷을 했다. 파티션을 C, D 드라이브로 분리하고 포맷을 해도 유지되어</description></item><item><title>오늘은 3, 1, 4, 2로 10을 만들어 봅시다!</title><link>https://if1live.github.io/posts/make-10-with-overflow/</link><pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/make-10-with-overflow/</guid><description>개요 2017년에 트위터에 #10을만들자 라는 해시태그가 유행한적 있다. 이런 느낌의 트윗이다. 오늘은 3, 1, 4, 2로 10을 만들어 봅시다! 존재하는 모든 연산을</description></item><item><title>나눗셈 연산을 곱셈으로 프로그래밍 할 수 있음?</title><link>https://if1live.github.io/posts/float-divide-without-divide/</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/float-divide-without-divide/</guid><description>개요 몇달전에 SNS를 하다가 재밌는 글을 봤다. 나눗셈 연산을 곱셈으로 프로그래밍 할 수 있음? 나누기/ 연산자를 안쓰고 정수에 대해서는 어떻게 구현할지 잘 모르겠</description></item><item><title>나도 해보는 Fizz Buzz Test</title><link>https://if1live.github.io/posts/fizz-buzz-01/</link><pubDate>Sat, 04 Aug 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/fizz-buzz-01/</guid><description>Fizz Buzz Test? Fizz Buzz Test는 상당히 오래된 떡밥이다. Write a program that prints the numbers from 1 to 100. But for multiples of three print &amp;ldquo;Fizz&amp;rdquo; instead of the number and for the multiples of five print &amp;ldquo;Buzz&amp;rdquo;. For numbers which are multiples of both three and five print &amp;ldquo;FizzBuzz&amp;rdquo;. 우리 말로 풀어서</description></item><item><title>12 ≦ x ≦ 0, 12 ≦ x ≦ 7</title><link>https://if1live.github.io/posts/12-lte-x-lte-0/</link><pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/12-lte-x-lte-0/</guid><description>SNS을 하다 재밌는 짤을 봤다. 말도 안되는 것처럼 보이지만 즐거운 C의 세계에서는 가능하다. 12 ≦ x ≦ 0 연산자 우선순위를 보자. &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;= : 왼쪽에서 오른쪽 읽</description></item><item><title>실제 사례로 보는 warning.or.kr</title><link>https://if1live.github.io/posts/warning-or-kr-in-real-case/</link><pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/warning-or-kr-in-real-case/</guid><description>심심하니 warning.or.kr 을 까자 2018년 5월초에 재밌는 떡밥이 돌았다. 문체부가 추진하는 https 사이트 차단 계획의 철회를 요청합니다. 글을 써보는게 어떠냐는 제안을 받아서 5</description></item><item><title>go get {command-line-tool} FAILED</title><link>https://if1live.github.io/posts/golang-hugo-is-down/</link><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/golang-hugo-is-down/</guid><description>go get -u github.com/gohugoio/hugo : FAIL 2018년 3월 9일, 블로그 빌드 스크립트 개선 작업을 했다. 별것도 고치지 않고 푸시했는데 travis-ci에서 빌드 도중 문제가 발생했다. 2</description></item><item><title>Jupyter를 블로그에 적용하기</title><link>https://if1live.github.io/posts/apply-jupyter-into-blog/</link><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/apply-jupyter-into-blog/</guid><description>why jupyter? 얼마 전에 google colabratory 라는 서비스가 있다는 소리를 들었다. jupyter를 구글 서버 위에서 사용할 수 있다고 하더라. jupyter라는게 있다는걸 이미 알고 있었</description></item><item><title>크롬OS에서 같은 앱을 2개 이상 여는 방법</title><link>https://if1live.github.io/posts/how-to-open-multiple-webapp-window-in-chrome-os/</link><pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/how-to-open-multiple-webapp-window-in-chrome-os/</guid><description>크롬OS에서 웹앱 창으로 열기 크롬OS에서는 웹사이트를 창으로 여는게 가능하다. 창으로 웹사이트를 열면 주소바가 사라져서 웹사이트가 아닌 크롬앱처럼 보인다.</description></item><item><title>한글 입력을 지원하는 크롬OS 터미널을 찾아서</title><link>https://if1live.github.io/posts/find-chrome-os-terminal-which-support-cjk-input/</link><pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/find-chrome-os-terminal-which-support-cjk-input/</guid><description>개요 2017년 7월에 Acer R11 chromebook를 샀다. 그리고 크롬OS에서 한글 입력이 제대로 되는 터미널을 돌리기 위해서 삽질한 기록을 요약했다. 비영어원</description></item><item><title>100 * 0.7 = ?</title><link>https://if1live.github.io/posts/amazing-floating-point-100x07/</link><pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/amazing-floating-point-100x07/</guid><description>100 * 0.7 = 69 Toy Clash는 10단계로 조절할 수 있는 막대 그래프를 이용해서 BGM 조절을 구현했다. 옵션을 저장하는 방식으로는 디버깅이 편한 XML을 사용했다. &amp;lt;volume-bgm&amp;gt;70&amp;lt;/volume-bgm&amp;gt;</description></item><item><title>유니티 프로젝트 빌드 시스템 구축하기</title><link>https://if1live.github.io/posts/make-unity-build-system/</link><pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/make-unity-build-system/</guid><description>개요 내가 만든 Toy Clash는 Samsung GearVR, Google Daydream, SteamVR, iOS를 지원한다. 이걸로 끝이 아니라 조만간 Windows Store도 추가될 예정이다. 내가 개발해보니까 이정도 갯수의 플랫폼</description></item><item><title>유니티 로그 뷰어, Sagiri</title><link>https://if1live.github.io/posts/introduce-sagiri/</link><pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/introduce-sagiri/</guid><description>개요 게임 개발하다보면 로그를 계속 보게 된다. 유니티의 경우 에디터 환경에서는 console창을 이용해서 로그를 볼수있다. 하지만 윈도우, 안드로이드, iOS 환</description></item><item><title>GC없이 C# Dictionary에서 enum을 key로 쓰기</title><link>https://if1live.github.io/posts/csharp-dictionary-enum-key-without-gc/</link><pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/csharp-dictionary-enum-key-without-gc/</guid><description>C# Dictionary + enum C# Dictionary는 Key-Value로 데이터를 저장할수 있는 좋은 자료구조이다. enum은 key로 쓰기에 좋은 타입이다. 그렇다면 둘을</description></item><item><title>C#에서 GC없이 enum을 int로 변환하기</title><link>https://if1live.github.io/posts/csharp-enum-to-int/</link><pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/csharp-enum-to-int/</guid><description>시나리오: enum으로 상태 관리 간단한 예제를 생각해보자. IState를 구현한 클래스가 있다고 가정하자. 그리고 클래스를 enum으로 관리하려고한다.</description></item><item><title>유니티에서 Switch Platform 안쓰고 크로스 플랫폼 지원하기</title><link>https://if1live.github.io/posts/unity-cross-platform-without-platform-switch/</link><pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/unity-cross-platform-without-platform-switch/</guid><description>switch platform? ios, android를 동시에 지원하는 게임을 유니티로 만든다고 가정해보자. 안드로이드 빌드, iOS 빌드를 만들때마다 Switch Platform을 하면 시간이 오래 걸</description></item><item><title>Unity Launcher 소개</title><link>https://if1live.github.io/posts/introduce-unity-launcher/</link><pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/introduce-unity-launcher/</guid><description>유니티 프로젝트를 진행하다보면 여러 버전의 유니티와 여러개의 프로젝트 폴더가 필요한 일이 생기게 된다. 간단한 예시를 만들어보자. 과거의 특정 시점에서 브렌치를</description></item><item><title>NDC 2017 &lt;로보리콜> 포스트모템 정리</title><link>https://if1live.github.io/posts/ndc-2017-robo-recall/</link><pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/ndc-2017-robo-recall/</guid><description>2017년 4월 26일에 NDC 2017을 갔다왔다. 잊어버리기전에 기억나는 내용을 정리해본다. 나와 관련있는 부분 아니면 기록도 안해놨다. 그래서 전체 내용을 알</description></item><item><title>Project Fumika, 중고책 처분 프로세스 개발기</title><link>https://if1live.github.io/posts/fumika-development-note/</link><pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/fumika-development-note/</guid><description>개요 개발 기간 : 2017/04/15 - 2017/05/30 개발 언어 : golang, java(android) 목표 : 가장 높은 값에 책을 중고로 처분하자 저장소 : fumika, fumika-scanner 나이먹고 집에 빌붙어서 사니까 슬슬 바가지를 긁더라. 가출을 해야겠</description></item><item><title>나의 warning.or.kr 검열기</title><link>https://if1live.github.io/posts/trade-my-info-warning-or-kr/</link><pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/trade-my-info-warning-or-kr/</guid><description>대한민국에는 악명높은 warning.or.kr가 있다. 나는 warning.or.kr을 국가에서 수행하는 검열이라고 생각하지만 이를 직접 비판하기는</description></item><item><title>유니티에서 에셋을 파일이름 기반으로 관리하는 편법</title><link>https://if1live.github.io/posts/unity-util-asset-name-attribute/</link><pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/unity-util-asset-name-attribute/</guid><description>문제 : 오디오 파일과 함수를 어떻게 연결할것인가? 게임에서 사용할 수십, 수백개의 오디오 파일이 있다. 그리고 어떤 상황(또는 함수)에서 어떤 사운드 파일을 재생</description></item><item><title>[#if UNITY_EDITOR] 줄이는 편법</title><link>https://if1live.github.io/posts/unity-tip-remove-if-unity-editor/</link><pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/unity-tip-remove-if-unity-editor/</guid><description>내 경우 유니티 에디터 확장을 따로 짜기 귀찮아서 MonoBehaviour 대신 VFW의 BaseBehaviour를 자주 사용한다. 그래서 에디터에서만 쓸수있는 클래스가 스크립트에</description></item><item><title>int main() { #include "data.txt" return 0; }</title><link>https://if1live.github.io/posts/x-macro-is-useful/</link><pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/x-macro-is-useful/</guid><description>흑마법은 많이 짜봤지만 int foo() { #include &amp;ldquo;data.txt&amp;rdquo; } 를 이길 물건은 아직 짜지 못했다. 내 명작 흑마법이었는데 리펙토링 하려다 c++ 접어서 방치 트위터에서 남들의 흑마법 코드를 보다가</description></item><item><title>MonoBehaviour를 더 좋게 만들어주는 라이브러리, VFW</title><link>https://if1live.github.io/posts/unity-library-vfw/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/unity-library-vfw/</guid><description>유니티로 개발하던 게임을 얼마전에 출시했다. 덕분에 몇달만에 여유가 생겼다. 그동안 바뻐서 블로그를 방치했었는데 다시 운영해볼까한다. 재밌는 떡밥이 뭐가 있을</description></item><item><title>유니티 게임객체, 프리팹에 주석 붙이는 편법</title><link>https://if1live.github.io/posts/unity-tip-game-object-comment/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/unity-tip-game-object-comment/</guid><description>코딩을 하다보면 코드에 여러가지 설명을 넣고 싶을때가 있다. 어떤 알고리즘을 사용했는지, 어떤 웹페이지에서 긁어온 소스인지, 어떤 인자를 함수에 넣어야하는지&amp;</description></item><item><title>Unity Scene Web Exporter 개발 포스트모템</title><link>https://if1live.github.io/posts/unity-scene-web-exporter-post-mortem/</link><pubDate>Sun, 28 Aug 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/unity-scene-web-exporter-post-mortem/</guid><description>개요 Unity Scene Web exporter Live Demo 목적 : 오브젝트 배치를 유니티에서 하고싶다 개발 기간 : 2016년 3월 ~ 2016년 8월 언어 : 유니티 C# Unity3D / Three.js screenshot Live Demo : Three.js file=embed.html format=text 왜 시작했는가</description></item><item><title>블로그를 Pelican에서 Hugo로 이사하기</title><link>https://if1live.github.io/posts/migration-from-pelican-to-hugo-post-mortem/</link><pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/migration-from-pelican-to-hugo-post-mortem/</guid><description>개요 pelican을 이용하는 블로그를 hugo 기반으로 바꾸기 기간 : 2016/02/?? ~ 2016/03/??, 2016/07/31 완료 주요 원인 pelican은 느리다 파이썬 2.x 는 도태된거같다 파이썬 3.x 의 호환성을</description></item><item><title>윈도우에서 길고 아름다운 경로명을 사용하는 방법</title><link>https://if1live.github.io/posts/dispatch-by-prefix/</link><pubDate>Sun, 05 Jun 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/dispatch-by-prefix/</guid><description>MAX_PATH 윈도우는 경로 최대길이가 제한되어 있다. MAX_PATH라는 상수로 260이다. 그래서 매우 긴 디렉토리를 만든 다음에 안에서 파일을 만들라고하면 다음과 같</description></item><item><title>gksrmfdldkscuwudy 포스트모템</title><link>https://if1live.github.io/posts/gksrmfdldkscuwudy-post-mortem/</link><pubDate>Sun, 29 May 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/gksrmfdldkscuwudy-post-mortem/</guid><description>개요 개요: 알파벳-두벌식 변환기 개발기간: 2016/05/07 00:00 ~ 2016/05/07 02:00 (2시간) 사용언어: JavaScript 저장소: https://github.com/if1live/gksrmfdldkscuwudy 써보기: https://if1live.github.io/gksrmfdldkscuwudy/ 집에서 뒹굴고 있다가 떡밥이 나와서 자기전에 만들었다.</description></item><item><title>Noto Sans Thai 올바르게 렌더링하는 방법</title><link>https://if1live.github.io/posts/how-to-render-noto-sans-thai-correctly/</link><pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/how-to-render-noto-sans-thai-correctly/</guid><description>개요 cocos2d-x 2.x 기반으로 개발된 모바일 게임을 태국에서 서비스하는 일을 예전에 했었다. (게임의 기본 폰트는 Noto Sans Thai였다) 개발하면서 크고 작은 태국어 렌더링 버그</description></item><item><title>고정소수점에서 2차원 벡터의 크기, 정규화된 벡터 계산하는 방법</title><link>https://if1live.github.io/posts/vector-length-and-normalize-doom-version/</link><pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/vector-length-and-normalize-doom-version/</guid><description>개요 게임을 만들면 벡터를 쓰게 된다. 그리고 벡터 클래스에서 2가지 기능은 끝도 없이 사용하게 된다. 하나는 정규화된 벡터(Normalized vector)</description></item><item><title>DOOM에서 배우는 atan2(y, x) 구현</title><link>https://if1live.github.io/posts/atan2-doom-version/</link><pubDate>Sun, 15 May 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/atan2-doom-version/</guid><description>개요 sin, cos가 있으면 각도를 벡터로 변환할 수 있다. 반대로 벡터를 각도로 변환할때는 atan2를 쓰면 된다. DOOM에서는 atan2를 어떻게 구현했나 코드</description></item><item><title>golang 패키지 관리의 약점과 대응책</title><link>https://if1live.github.io/posts/golang-package-management-failure-learned-from-github-kr-text/</link><pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/golang-package-management-failure-learned-from-github-kr-text/</guid><description>개요 2016년 3월 22일, npm에서 left-pad가 사라지면서 node.js를 사용하는 수많은 사람들이 혼돈의 카오스에 빠졌다. 그리고 2016년</description></item><item><title>DOOM에서 배우는 각도 표현하는 방법과 sin, cos 구현법</title><link>https://if1live.github.io/posts/angle-and-sine-doom-version/</link><pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/angle-and-sine-doom-version/</guid><description>개요 최근 고정 소수점 기반으로 게임을 만들고 있다. 요즘에서는 고정 소수점이 일종의 잃어버린 기술가 되어서 참고할 자료가 많지 않더라. Fixed-point arithmetic를</description></item><item><title>Maya (Markdown 전처리기) 포스트모템</title><link>https://if1live.github.io/posts/maya-markdown-preprocessor-post-mortem/</link><pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/maya-markdown-preprocessor-post-mortem/</guid><description>Why? 2013년부터 2016년 2월까지 정적 사이트 생성기로 pelican을 썼다. 파이썬 3.x 시대가 열리면서 pelican에 대한 불만이 생겨서 hugo로 갈</description></item><item><title>고정소수점 관련 자료</title><link>https://if1live.github.io/posts/fixed-point-intro/</link><pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/fixed-point-intro/</guid><description>How to use Fixed Point (16.16) Math - by Night Stalker C에서 고정소수점 라이브러리 구현하기 Part 1 of 2 Part 2 of 2 libfixmath C C# Links Doing It Fast - Fixed point arithmetic, loop unrolling, fast 3D transforms Slides The neglected art of Fixed Point arithmetic DOOM Source Wikipedia - Fixed-point arithmetic Doom was the last</description></item><item><title>반복문, 재귀없이 터미널에 다이아 그리기</title><link>https://if1live.github.io/posts/double-loop-with-array/</link><pubDate>Mon, 21 Mar 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/double-loop-with-array/</guid><description>간단한 문제 극악의 c언어 문제 ----- * *** ***** *** * ----- for문을 이용해서 별을 출력하는 문제인데 주변에 프로그래밍좀 한다는 친구들도 이 문제는 못풀더군요. 과연 오유 여</description></item><item><title>delete this 이용해서 터미널에 삼각형 그리기</title><link>https://if1live.github.io/posts/recursion-with-destructor/</link><pubDate>Sat, 19 Mar 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/recursion-with-destructor/</guid><description>어제 회사에서 delete this 에 대해 이것저것 이야기를 했었다. 그리고 꿈에서 delete this 로 재귀를 구현하는 흑마법이 생각나서 짜봤다. 목표 : delete this를 이용해서 다음과 같은 삼</description></item><item><title>Twitter Image Archive 개발 포스트모템</title><link>https://if1live.github.io/posts/twitter-image-archive-post-mortem/</link><pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/twitter-image-archive-post-mortem/</guid><description>개요 트윗을 싹 지우고 싶다는 생각이 들었다. 트위터에는 개소리만 싸질렀지만 그래도 쓸만한 데이터를 얻을수 있지 않을까해서 백업을 하고 트윗을 지우기로 마음먹었다</description></item><item><title>printf("%s\n", NULL)의 출력 결과는?</title><link>https://if1live.github.io/posts/printf-with-null-post-mortem/</link><pubDate>Sun, 06 Mar 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/printf-with-null-post-mortem/</guid><description>떡밥의 시작 오늘도 평소와 똑같이 트위터는 인생의 낭비를 라는 명언대로 행동하다 재밌는 트윗을 봤다. New Tweet &amp;ldquo;트위터만 보고 있지 말고 %s 해야지&amp;rdq</description></item><item><title>버그 삽질기 - 파이썬으로 구현한 API 서버 루비로 포팅하기</title><link>https://if1live.github.io/posts/http-request-params-trap-python-and-ruby/</link><pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/http-request-params-trap-python-and-ruby/</guid><description>간단한 명언 API 서버를 만들보자. 필요한 기능은 다음과 같다. 명언 목록을 데이터로 분리한다. 나중에 목록을 쉽게 갱신할수 있어야한다. 서버에 접속하면 명언중 하나</description></item><item><title>존재하지 않는 키로 테이블에 접근하면?</title><link>https://if1live.github.io/posts/if-key-does-not-exist-then/</link><pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/if-key-does-not-exist-then/</guid><description>존재하지 않은 키로 테이블에 접근했을때 각각의 언어는 어떤 식으로 행동할까? 올바르지 않은 인덱스로 리스트에 접근하면 각각의 언어는 어떤 식으로 행동할까? 파이썬</description></item><item><title>올바르지 않은 값을 정수로 변환하기 - 파이썬 vs 루비</title><link>https://if1live.github.io/posts/make-int-from-invalid-value-python-and-ruby/</link><pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/make-int-from-invalid-value-python-and-ruby/</guid><description>올바르지 않은 값을 정수로 바꾸는 일은 웹을 포함한 여러가지 개발에서 자주하는 작업 중 하나이다. 예를 들어서 /articles/?id={int} 를 구현한 서버가 있다고 가정하자. /article</description></item><item><title>삽질로 알아보는 파이썬과 루비의 기본 매개변수</title><link>https://if1live.github.io/posts/default-argument-python-and-ruby/</link><pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/default-argument-python-and-ruby/</guid><description>파이썬과 루비의 문법 차이로 인한 버그를 당한적은 자주 있었지만 글로 다룰 생각까진 (게을러서) 하지 않았다. 하지만 아래의 글을 읽고 파이썬와 루비의 차이로 인한 버</description></item><item><title>예제로 보는 Python과 Ruby의 문법 차이 - Multiple Assignment</title><link>https://if1live.github.io/posts/multiple-assignment-python-and-ruby/</link><pubDate>Sun, 14 Feb 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/multiple-assignment-python-and-ruby/</guid><description>파이썬과 루비는 겉보기에는 비슷해보이면서 완전히 다르게 행동하는 문법이 있다. 그래서 파이썬을 생각하면서 루비 코드를 짜면 어처구니 없는 버그가 생긴다. 이런 일</description></item><item><title>디버깅 포스트모템 - 박살난 소멸자</title><link>https://if1live.github.io/posts/buffer-overflow-broken-dtor-debugging-post-mortem/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/buffer-overflow-broken-dtor-debugging-post-mortem/</guid><description>개요 최근에 레거시 코드에 숨겨진 버퍼 오버플로우 버그를 잡느라고 하루를 날렸습니다. 찾고나니 간단한 버그였지만 하루씩이나 걸렸습니다. 버그를 잡은 다음에 생각</description></item><item><title>Go language 첫인상</title><link>https://if1live.github.io/posts/golang-first-impression/</link><pubDate>Sun, 20 Dec 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/golang-first-impression/</guid><description>개요 주력 언어를 바꾸는건 어려운 일이다. 주력 언어를 바꾸면 상당히 많은걸 버려야하기 때문이다. 익숙한 세계를 버리고, 지금까지 배운 라이브러리를 잊고, 지금까</description></item><item><title>매크로 상수를 변경하기 쉽게 바꾸는 편법</title><link>https://if1live.github.io/posts/refactoring-c-macro-constant/</link><pubDate>Fri, 27 Nov 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/refactoring-c-macro-constant/</guid><description>int main() { printf(&amp;#34;%d\n&amp;#34;, FOO &amp;#43; 123); 프로젝트를 진행하면 아무리 설계를 잘해도 여러 파일에서 사용되는 상수를 피할수 없다. 이때는 보통 공유하는 상수/함수 등을 모아서 별도의 헤더 파일</description></item><item><title>아름다운 PHP array_search()</title><link>https://if1live.github.io/posts/alternatives-to-php-array-search/</link><pubDate>Sun, 08 Nov 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/alternatives-to-php-array-search/</guid><description>개요 떡밥 투척 boolean 검사코드 나는 success==false 파벌 https://twitter.com/if1live/status/662925445990498304 집에서 뒹굴다가 뜬금없는 떡밥이 생각나서 트위터에 투표를 던졌다. 투표를 던지고 보니 생각보다 많은 사람들이 if(!success) 를 선호하더</description></item><item><title>bit mask로 사람 낚기. (flags &amp; MASK == MASK)</title><link>https://if1live.github.io/posts/deceiving-code-bitmask/</link><pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/deceiving-code-bitmask/</guid><description>낚시 코드 C/C++ 에서는 한번에 여러개의 플래그를 넘길떄 비트 연산자를 사용하기도 한다. 다음은 간단한 예제 코드이다. 사용 가능한 플래그로는 fullscreen, stencil, double buffer가 있</description></item><item><title>HTML textarea의 개행문자는 무엇일까?</title><link>https://if1live.github.io/posts/what-is-textarea-newline/</link><pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/what-is-textarea-newline/</guid><description>개요 내가 요즘에 만드는 것은 HTTP기반의 모바일 게임이다. 서버와 클라는 HTTP로 통신을 하고 클라는 서버의 요청을 예쁘게 그려주는 역할을 수행한다. 간단히</description></item><item><title>스택 지역 변수의 주소값을 이용한 버그</title><link>https://if1live.github.io/posts/stack-allocation-voodoo-magic/</link><pubDate>Wed, 07 Oct 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/stack-allocation-voodoo-magic/</guid><description>얼마전에 gcc와 clang이 정렬되지 않은 구조체(예를 들어 구조체의 크기가 7바이트) 를 어떤식으로 메모리에 배치하는지 테스트하다가 재밌는 현상을 발견해</description></item><item><title>Doge Math 개발 포스트모템</title><link>https://if1live.github.io/posts/doge-math-post-mortem/</link><pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/doge-math-post-mortem/</guid><description>개요 2015/09/07 ~ 2015/09/12 동안 뻘짓 개발한 개인 플젝을 정리하기로 했다. 지금까지는 개인 프로젝트에 대해서 기록을 남기지 않았지만 이번에는 몇가지 이유로 기록을 남겨볼까한다.</description></item><item><title>코드에 반각/전각문자 넣어서 낚시하기</title><link>https://if1live.github.io/posts/deceiving-code-fullwidth-halfwidth/</link><pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/deceiving-code-fullwidth-halfwidth/</guid><description>개요 프로그래머 머리 터지게 하는 방법 작업중인 코드를 몰래 열어 세미콜론(;) 하나를 그리스어 물음표(;)로 바꾼다 tweet 세미콜론(;) 하나를 그리스어 물음표(</description></item><item><title>사람 낚는 strcmp()의 리턴타입 재설계하기</title><link>https://if1live.github.io/posts/my-strcmp/</link><pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/my-strcmp/</guid><description>strcmp()로 낚시하기 &amp;ldquo;좋은 함수 함수의 예를 쓰시오.&amp;rdquo; 이것은 어려운 질문이다. 사람마다 좋다고 생각하는 기준이 다르기 때문</description></item><item><title>"foo" "bar" == "foobar"</title><link>https://if1live.github.io/posts/string-literal-concatenation-technique/</link><pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/string-literal-concatenation-technique/</guid><description>개요 print(&amp;#34;foo&amp;#34; &amp;#34;bar&amp;#34; == &amp;#34;foobar&amp;#34;) $ python intro.py True C에는 문자열과 문자열 사이에 공백문자가 존재할때 두 문자열을 붙여서 하나의 문자열로 취급하는 문법이 있다. 이것을 String literal concaten</description></item><item><title>C++ TMP를 이용해서 2015년의 13일의 금요일 계산하기</title><link>https://if1live.github.io/posts/friday-the-13th-tmp/</link><pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/friday-the-13th-tmp/</guid><description>개요 2015년 3월 15일에 코딩 전력 60분!에서 13일의 금요일을 구하는 문제를 던졌다. 다음 트윗에서 Short coding을 목표로 제시했지만 나는 그걸 못봤다</description></item><item><title>Process Address Space</title><link>https://if1live.github.io/posts/system-programming-process-address-space/</link><pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-programming-process-address-space/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. 개요 선형 주소 공간 : 2 ** BIT_PER_LONG byte, 32bit의 경우 4GB 0 ~ 3GB (PAGE_OFFSET) : Process Address Space 3G의 Process Address</description></item><item><title>Linux File System</title><link>https://if1live.github.io/posts/system-programming-linux-file-system/</link><pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-programming-linux-file-system/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Linux File System File System 커널 및 외부 메모리안의 파일 시스템의 디렉토리를 관리하는 커널 서브 시</description></item><item><title>나는 unsigned가 싫어요</title><link>https://if1live.github.io/posts/i-hate-unsigned/</link><pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/i-hate-unsigned/</guid><description>개요 Youtube, 강남스타일 MV 조회수가 32비트 정수 범위를 넘어섰다고 밝혀 를 보니까 댓글에서 &amp;ldquo;왜 unsigned안쓰고 signed썻냐?&amp;rdqu</description></item><item><title>Ext2 File System</title><link>https://if1live.github.io/posts/system-programming-ext2-file-system/</link><pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-programming-ext2-file-system/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Abstract View of VFS Objects In kernel memory super block dentry inode file VFS, 어떤 FS를 쓰더라도 동일 File System 문서 참고 On disk Ext2 Filesystem</description></item><item><title>Memory Management</title><link>https://if1live.github.io/posts/system-programming-memory-management/</link><pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-programming-memory-management/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Linux Memory Management 가상 메모리 요구 페이지 (Demand Paged Virtual Memory) 모델 물리 페이지의 매핑, 할당, 관리 2차</description></item><item><title>Memory Addressing</title><link>https://if1live.github.io/posts/system-programming-memory-addressing/</link><pubDate>Wed, 26 Nov 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-programming-memory-addressing/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Memroy Addressing (Intel x86) 논리 주소 (Logical Address) 명령어나 데이터를 참조할때 사용하는 주소 세그먼트 + 오프</description></item><item><title>Kernel Synchronization</title><link>https://if1live.github.io/posts/system-prog-kernel-synchronization/</link><pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-prog-kernel-synchronization/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 앞으로 없다. Kernel Synchronization Kernel Control Paths 커널 함수는 다음 요청에 따라서 실행된다 유저 모드에서 실행되는 프로세스</description></item><item><title>Signals</title><link>https://if1live.github.io/posts/system-prog-signals/</link><pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-prog-signals/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 앞으로 없다. Signals Signals Signal 프로세스에 이벤트를 알릴때 보내는 것 프로세스나 프로세스 그룹에 간단한 메세</description></item><item><title>System Calls</title><link>https://if1live.github.io/posts/system-prog-system-call/</link><pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-prog-system-call/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 앞으로 없다. System Call System Call Principles 어플리케이션과 하드웨어 사이에 별도의 레이어를 끼워넣는다 프로그래밍</description></item><item><title>Timing Measurements</title><link>https://if1live.github.io/posts/system-prog-timing-measurements/</link><pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-prog-timing-measurements/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 앞으로 없다. Timing Measurements Computer Time 많은 컴퓨터 작업은 time-driven time-driven example 주기적으로 소프트웨어 업데이트 확인 유저가 일정</description></item><item><title>C++에서 Python의 with statment 구현하기</title><link>https://if1live.github.io/posts/with-statement-cpp/</link><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/with-statement-cpp/</guid><description>파이썬에는 객체의 생성과 소멸의 범위를 확실하게 정하는 목적으로 with 문법이 존재한다. 파이썬은 C와 달리 블럭 스코프를 이용해서 객체의 생성주기를 통제할수 없기 때</description></item><item><title>Interrupt and Exceptions</title><link>https://if1live.github.io/posts/sytem-prog-study-interrupt-and-exceptions/</link><pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/sytem-prog-study-interrupt-and-exceptions/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Interrupt and Exceptions Interrupt vs Exception Interrupt Asynchronous Interrupt 외부장치 -&amp;gt; CPU 외부 장치 : keyboard, etc CPU : processor&amp;rsquo;s interrupt pin으로 입력 받기</description></item><item><title>Linux Process Scheduling</title><link>https://if1live.github.io/posts/system-prog-linux-process-schduling/</link><pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-prog-linux-process-schduling/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Linux Process Scheduling Process Schdeuling 언제 switch 할 것인가 + 무엇을 switch 할 것인가? 목표 빠른 프로세스 반응 시간 백</description></item><item><title>Linux Processes</title><link>https://if1live.github.io/posts/system-prog-linux-processes/</link><pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/system-prog-linux-processes/</guid><description>시스템 프로그래밍 시험 공부하면서 정리한 내용이다. 내용 갱신은 없을 예정이다. Linux Processes Processor Execution Modes Dual Mode Operation User Mode Level 3 권한 제한되어있음 일반적인 프로그램 Kernel Mode Level 0 커널의</description></item><item><title>importd - Django as a micro-framework</title><link>https://if1live.github.io/posts/introduce-importd/</link><pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/introduce-importd/</guid><description>What is importd? importd (importd-repo) 는 Amit Upadhyay 님이 django micro framework이다. 우리나라에는 거의 알려져있지 않은데 @cedar101 님의 소개로 알게 되어서 사용해봤다. 직접 쓰면서 느낀 import</description></item><item><title>Django용 적절한 라이브러리 소개</title><link>https://if1live.github.io/posts/good-django-library/</link><pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/good-django-library/</guid><description>2년 전, 신규 웹 프로젝트를 django로 시작했지만 django의 몇가지 문제 때문에 flask로 갈아탔다. 프로젝트 시작한지 얼마되지 않은 시점이어서 코</description></item><item><title>EZ430-Chronos 개발 후기</title><link>https://if1live.github.io/posts/ez430-chronos-development-review/</link><pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/ez430-chronos-development-review/</guid><description>최근에 ez430-chronos 를 가지고 놀면서 나만의 펌웨어 를 만들었다. ez430-chronos 갖고 노는걸 끝내기 전에 그동안 삽질했던 경험+교훈을 정리해봤다. (별거 없지만) uint8_t, uint16_t, uint32_t, int8_t, int16_t, int32_t 일반적인</description></item><item><title>Awesome 3.5 install Guide for Ubuntu 13.10</title><link>https://if1live.github.io/posts/awesome-3-5-install/</link><pubDate>Sat, 22 Mar 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/awesome-3-5-install/</guid><description>Why not 3.4? On Ubuntu 13.10, current stable version is 3.4.15-1. awesome 3.4 doesn&amp;rsquo;t support different wallpeper on each screen. awesome 3.5 support it. I want this feature.
Object Install awesome 3.5.3(current stable) on ubuntu 13.10
Try PPA, but&amp;hellip; I&amp;rsquo;m lazy, so I like package rather than compile. I try using PPA.
PPA for Arnaud Guignard PPA for Klaus Vormweg After install awesome 3.5, I execute awesome, But crash occur. I decide to install awesome 3.</description></item><item><title>파이썬 엑셀 쓰기 라이브러리 비교</title><link>https://if1live.github.io/posts/python-excel-library/</link><pubDate>Sun, 23 Feb 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/python-excel-library/</guid><description>subtitle: 무엇을 골라야 후회하지 않는가? 리눅스에서 굴러가는 파이썬 기반의 통계 도구를 만든적이 있다. 리눅스에서도 굴러가는 엑셀 라이브러리를 몇개 찾아봤고 직접 써본</description></item><item><title>한국형 반응형웹 프레임웍을 찾아서</title><link>https://if1live.github.io/posts/ie7-responsive-web-framework/</link><pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/ie7-responsive-web-framework/</guid><description>Trade My Info의 GA 통계에서 볼 수 있듯이 2014년 2월 기준 우리나라에서 IE 7,8의 사용비율은 데탑유저 중 15%이다. 이를 버리고 차세대 웹으로 가고싶은 마음</description></item><item><title>Trade My Info의 GA 통계</title><link>https://if1live.github.io/posts/trade-my-info-ga/</link><pubDate>Sun, 02 Feb 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/trade-my-info-ga/</guid><description>&amp;ldquo;Trade My Info No.1 온라인 개인정보거래소&amp;rdquo; trade-my-info 를 만들때 그냥 GA를 달아놨었다. 그런데 생각보다 사이트가 흥해서 쓸만한 통계가 모였길래 정리해봤다. 예상 사</description></item><item><title>GitHub Pages와 travis-ci를 엮은 정적 블로그 자동화</title><link>https://if1live.github.io/posts/static-blog-sample/</link><pubDate>Sat, 01 Feb 2014 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/static-blog-sample/</guid><description>이 블로그에 travis-ci를 붙인 기념 static html generator 좋다고 영업좀 하고 약팔자 정리 안해놓으면 나중에 또 까먹을까봐(실제로 했던 작업 글 쓰면서 다시 했는데 또 삽질했</description></item><item><title>Wireless Latency Benchmark</title><link>https://if1live.github.io/posts/wireless-latency-benchmark/</link><pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/wireless-latency-benchmark/</guid><description>요즘에 스마트폰을 게임 컨트롤러로 쓰는걸 만들고있다. 처음에는 소켓으로 구현해봤는데 latency가 못쓸물건이더라. PS3 컨트롤러는 블투투스를 쓴다길래 블</description></item><item><title>2014년 오큘러스 트렌트 예측</title><link>https://if1live.github.io/posts/oculus-2014-predict-trend/</link><pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/oculus-2014-predict-trend/</guid><description>개요 오큘러스 대응해서 뭔가를 계속 개발하고 있는데 내가 가고 있는 길이 맞는 길인지 나도 확신을 못해서 정리해볼겸 써봤다. 제목은 거창하게 2014년 예측이지만 내</description></item><item><title>LibOVR에서 찾은 적절한 assert macro</title><link>https://if1live.github.io/posts/libovr-assert-macro/</link><pubDate>Mon, 14 Oct 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/libovr-assert-macro/</guid><description>개발하려면 어쨋든 assert가 있긴 해야겠더라. 근데 기본 assert를 쓰면 callstack 추적하기가 귀찮더라. 그래서 맨날 간단한 매크로(int 3) 만들어서 사용했</description></item><item><title>OculusRift + 3D GUI 개발기록 part 1</title><link>https://if1live.github.io/posts/oculus-interactive-surface-1/</link><pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/oculus-interactive-surface-1/</guid><description>이전부터 계속 만들어보고 싶었던 Doom3 같은 느낌의 3D GUI 데모를 만들어봣다 목표 Oculus SDK와 적절히 결합시키기. 다른 엔진에서 오큘러스를 지원하도록 만든 코드를 보면 렌</description></item><item><title>Build CEGUI 0.8.2 on Windows + OGRE</title><link>https://if1live.github.io/posts/cegui-build/</link><pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/cegui-build/</guid><description>CEGUI 빌드 하느라 삽질좀 해서 공유용 문서를 썻다. 어차피 요즘 대세는 유니티니까 팀원말고는 보지도 않겠지. 준비물 OGRE 빌드해놓기. 귀찮으면 prebuilt library가 있어</description></item><item><title>KGC 2013 오큘러스 세션 구경 소감</title><link>https://if1live.github.io/posts/kgc2013-oculus-rift/</link><pubDate>Mon, 30 Sep 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/kgc2013-oculus-rift/</guid><description>KGC 2013 오큘러스 세션 구경 소감</description></item><item><title>irrlicht engine 사용기</title><link>https://if1live.github.io/posts/irrlight-engine-review/</link><pubDate>Mon, 26 Aug 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/irrlight-engine-review/</guid><description>subtitle : 2달 정도 만져보고 간단한 프로젝트를 완료후의 irrlicht 사용 소감 장점 빈곤한 자의 게임 엔진 / C++의 확장성 요즘 트렌드는 unity engine인거 게임업계 사람 아닌 나</description></item><item><title>Oculus Rift 개발하면서 구경한 이상현상</title><link>https://if1live.github.io/posts/oculus-rift-artifacts/</link><pubDate>Wed, 21 Aug 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/oculus-rift-artifacts/</guid><description>최근에 오큘러스 리프트 잡고 개발한게 있다. (프로젝트는 망했지만) 개발하면서 일반 CG에서는 절대로 볼수없고 오직 오큘러스 리프트에서만 구경할수 있는 이상 렌</description></item><item><title>irrlicht-console sample</title><link>https://if1live.github.io/posts/irrlicht-console/</link><pubDate>Sun, 28 Jul 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/irrlicht-console/</guid><description>irrlicht engine에서 quake console같은걸 쓰고싶어서 하나 만들었다. 옛날부터 알고있었던 GLConsole와 이번에 새로 찾은 IrrConsole를 조</description></item><item><title>Controller for Raspberry Pi + MPD</title><link>https://if1live.github.io/posts/rpi-mpd-controller/</link><pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/rpi-mpd-controller/</guid><description>Controller for Raspberry Pi + MPD</description></item><item><title>완벽한 싱글턴을 찾아서 - 테스트</title><link>https://if1live.github.io/posts/singleton-test/</link><pubDate>Tue, 18 Jun 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/singleton-test/</guid><description>이전에 사람들이 많이 사용하는 방식의 싱글턴을 까는 글을 쓰고 그것을 해결책을 정리했었다.(사실은 복붙에 더 가깝지만&amp;hellip;) 최근에 조금 더 생각해보</description></item><item><title>eZ430-Chronos Google OTP 삽질기</title><link>https://if1live.github.io/posts/ez430-chronos-google-otp/</link><pubDate>Sat, 25 May 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/ez430-chronos-google-otp/</guid><description>몇달전에 손목시계가 필요했다 + 개발가능이면 더 좋겠지 해서 eZ430-Chronos를 충동적으로 샀다. 막상 질러놓고 이걸 어따 쓸까 하다가 마땅한 방법이 생</description></item><item><title>나는 싱글턴이 싫어요</title><link>https://if1live.github.io/posts/i-hate-singleton/</link><pubDate>Sun, 19 May 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/i-hate-singleton/</guid><description>옛날에는 싱글턴을 자주 썼는데 요즘에는 안쓴다. 내가 싱글턴을 안쓰게 된 몇가지 이유가 있는데 다음과 같다 소멸 시점이 있긴한가? static을 이용해서 구현한 싱</description></item><item><title>셰이더 프로그래밍 입문 for GLSL</title><link>https://if1live.github.io/posts/glsl-example/</link><pubDate>Sat, 27 Apr 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/glsl-example/</guid><description>포프님의 **셰이더 프로그래밍 입문**을 읽으면서 이거 GLSL로 구현하면서 공부해보자 하면서 만든게 있는데 귀찮아서 방치해놧다가 지금서야 정리했다. 책은</description></item><item><title>3차원 공간에 2차원 객체 렌더링</title><link>https://if1live.github.io/posts/text-billboard/</link><pubDate>Sun, 21 Apr 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/text-billboard/</guid><description>디버깅 용도(예를 들면, 물체의 좌표값, 게임객체의 상태등을 표시)로 3차원 공간상에 2차원 객체(텍스트 포함)를 그냥 출력하고 싶다. 이렇게 사용하기 위해서</description></item><item><title>Simple Mesh Library</title><link>https://if1live.github.io/posts/simple-mesh/</link><pubDate>Sat, 20 Apr 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/simple-mesh/</guid><description>glut에는 Cube / Sphere / Cone / Teapot&amp;hellip;등을 렌더링할 수 있는 함수가 존재한다. 하지만 glut를 안쓰고 glfw를 쓰거나 GLES환경에서</description></item><item><title>Vincent Font Library</title><link>https://if1live.github.io/posts/vincent-font-library/</link><pubDate>Fri, 19 Apr 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/vincent-font-library/</guid><description>Public Domain 8x8 Bitmap Font인 Vincent Font를 적절하게 사용하기 위해서 만든 코드를 정리했다. 앞으로는 새로운 OpenGL Text Library를 주로 사용하겠지만 왠지 아까워서&amp;he</description></item><item><title>OpenGL Text Library</title><link>https://if1live.github.io/posts/opengl-text-library/</link><pubDate>Wed, 17 Apr 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/opengl-text-library/</guid><description>OpenGL 자체에는 텍스트 출력 관련된 함수가 없다. 근데 개발과정, 디버깅의 용도로 텍스트 출력이 있었으면 한다. glut기반으로 개발하고 있다면 glutStrokeString / glutBitmapString 를 사용하면 된</description></item><item><title>Raspberry Pi를 무선공유기로 쓰기</title><link>https://if1live.github.io/posts/raspberry-pi-hostapd/</link><pubDate>Tue, 09 Apr 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/raspberry-pi-hostapd/</guid><description>내 방은 집의 무선네트워크에서 미묘하게 사각지대에 위치한다. 그래서 누워서 인터넷하면 잘 끊긴다. 이를 해결하고자 집에서 굴러다니는 라즈베리 파이와 옛날에 사서</description></item><item><title>Box2D Common Module</title><link>https://if1live.github.io/posts/box2d-common/</link><pubDate>Tue, 12 Feb 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/box2d-common/</guid><description>Math InvSqrt /// This is a approximate yet fast inverse square-root. inline float32 b2InvSqrt(float32 x) { union { float32 x; int32 i; } convert; convert.x = x; float32 xhalf = 0.5f * x; convert.i = 0x5f3759df - (convert.i &amp;gt;&amp;gt; 1); x = convert.x; x = x * (1.5f - xhalf * x * x); return x; } quake3 이후로 계속 많이 쓰인다는 Fast</description></item><item><title>C#에서 C++ DLL 사용하기</title><link>https://if1live.github.io/posts/csharp-cpp-dll/</link><pubDate>Tue, 12 Feb 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/csharp-cpp-dll/</guid><description>개요 C#에서 C++ dll을 사용하기 위해서는 pinvoke(platform invoke)를 사용하면 된다. 아래의 내용은 사용법에 대한 간단한 정리이다. 내용 생략하고 Sample 를 받아도 된다. C++</description></item><item><title>Python 2.x 한글 인코딩 관련 정리</title><link>https://if1live.github.io/posts/python-hangul/</link><pubDate>Sun, 03 Feb 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/python-hangul/</guid><description>개요 파이썬은 양놈이 만든 언어라서 한글을 쓸때 골치아프다 (아니, 한글만 골치아픈게 지옥의 언어 CJK(chiness, japanese, korean)를 포함한 멀티바이트 언어는 전부 그렇겠지)</description></item><item><title>Flask Project 구조 예제</title><link>https://if1live.github.io/posts/flask-project-structure/</link><pubDate>Thu, 31 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/flask-project-structure/</guid><description>요즘에는 Flask를 주력으로 사용하고 있다. Flask는 가볍게 쓰는것을 목표로 설계된 라이브러리다 보니까 프로젝트 구조를 어떻게 잡을지에 대한 가이드라인</description></item><item><title>Django Project 구조 예제</title><link>https://if1live.github.io/posts/django-project-structure/</link><pubDate>Wed, 30 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/django-project-structure/</guid><description>최근에 Django로 코딩한적이 있다. django는 기본적으로 프로젝트 트리에 적절한 제약이 걸려있기 떄문에 굳이 신경안쓰고 django 가이드라인에서 제공하는대</description></item><item><title>Uber Shader</title><link>https://if1live.github.io/posts/uber-shader/</link><pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/uber-shader/</guid><description>기본 개념은 한 개의 쉐이더 소스를 짜고 ifdef/ifndef 질을 해서 쉐이더 코드를 여러 형태로 변화시키는 것이다. 이것이 의미가 있는 이유는 여러 종류의 광원모델을 기반으로 쉐이더를</description></item><item><title>auto_ptr을 썻는데 소멸자가 불리지 않는다?</title><link>https://if1live.github.io/posts/auto-ptr/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/auto-ptr/</guid><description>auto_ptr은 아주 간단한 스마트 포인터의 일정으로 동적할당된 객체를 자동으로 delete하는데 쓰인다. 하지만 잘못된 코딩을 하면 소멸자가 호출되지 않</description></item><item><title>Box2d Block Allocator</title><link>https://if1live.github.io/posts/box2d-block-allocator/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/box2d-block-allocator/</guid><description>작은크기의 객체를 많이 할당할때 사용되는 할당자이다. 기본설정값의 경우, 대략 640byte보다 작은 메모리를 많이 요청할때 사용한다 기본 구조 Chunk, Block</description></item><item><title>Box2d Stack Allocator</title><link>https://if1live.github.io/posts/box2d-stack-allocator/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/box2d-stack-allocator/</guid><description>구조 고정크기로 b2_stackSize(기본값 100kb)의 메모리를 가지고 이것을 맨앞부터 쪼개서(그래서 스택기반) 사용하는 할당자이다. 구조가 단</description></item><item><title>C#의 프로퍼티 C++에서 쓰기</title><link>https://if1live.github.io/posts/charp-like-property/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/charp-like-property/</guid><description>본문을 읽기전에 아래의 2개의 페이지를 읽어보면 이해에 도움이 될것이다. 사실상 내가 만든 코드는 위의 2개를 내 방식대로 묶은것뿐이다 [Property(programming)][1] [C++에서 속성 구현하</description></item><item><title>cocos2d-x 메모리 관리에 대한 간단한 정리</title><link>https://if1live.github.io/posts/cocos2dx-memory-management/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/cocos2dx-memory-management/</guid><description>cocos2d-x는 cocos2d를 거의 그대로 포팅한 2d게임 엔진이다. 원작이 objc 기반인 cocos2d를 C++로 옮겼으니 완전히 똑같지는 않다. 특히</description></item><item><title>memset로 클래스 초기화 쉽게 하기</title><link>https://if1live.github.io/posts/class-init-with-memset/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/class-init-with-memset/</guid><description>일반적으로 C++에서는 멤버변수 초기화를 다음과 같은 문법으로 한다. class SomeClass { public: SomeClass() : a(0), b(0) {} private: int a; float b; }; 만약 클래스안에 멤버변수가 많다면 위와 같은 문법으로 코</description></item><item><title>게임 좌표계에 대한 고찰</title><link>https://if1live.github.io/posts/game-coord-system/</link><pubDate>Fri, 25 Jan 2013 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/game-coord-system/</guid><description>좌표계에 대한 고찰 3D 그래픽스 좌표계에는 크게 2가지(왼손 좌표계/오른손 좌표계)가 있다. 왼손/오른손 좌표계 모두 왼쪽..오른쪽 방향을 +x, 아래..위쪽 방</description></item><item><title>윈도우 환경에서 emacs HOME 디렉토리 변경하기</title><link>https://if1live.github.io/posts/emacs-home-dir/</link><pubDate>Mon, 31 Dec 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/emacs-home-dir/</guid><description>유닉스 환경의 경우 이맥스 설정파일은 /home/user_name/.emacs에 위치한다. 그런데 윈도우라면 저런 경로가 존재할리가 없잖아? 윈도우의</description></item><item><title>이맥스 내장 한글입력기 사용하기 + 기본한글설정</title><link>https://if1live.github.io/posts/emacs-hangul-key/</link><pubDate>Mon, 31 Dec 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/emacs-hangul-key/</guid><description>이맥스는 특유의 괴랄한 규모덕분에 다른 에디터에서는 거의 찾아볼수 없는 기능인 한글입력기가 내장되어있다. (그러니까 한영키를 눌러서 한글/영문 입력상태를 바</description></item><item><title>집합 기반 태그 시스템 설계</title><link>https://if1live.github.io/posts/set-based-tag/</link><pubDate>Tue, 18 Dec 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/set-based-tag/</guid><description>집합 기반 태그 시스템 설계</description></item><item><title>윈도/ios/안드로이드를 커버할수 있는 PCH 구조 잡기</title><link>https://if1live.github.io/posts/cross-platform-stdafx/</link><pubDate>Sat, 08 Dec 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/cross-platform-stdafx/</guid><description>윈도/ios/안드로이드를 커버할수 있는 PCH 구조 잡기</description></item><item><title>cocos2d-x 1.x->2.0으로 변하면서 바뀐 부분 :: CCPoint</title><link>https://if1live.github.io/posts/ccpoint-lua/</link><pubDate>Tue, 04 Dec 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/ccpoint-lua/</guid><description>cocos2d-x 1.x-&amp;gt;2.0으로 변하면서 바뀐 부분 :: CCPoint</description></item><item><title>플랫폼 매크로 추가 선언 없이 윈도/iOS/안드로이드 구분하는 매크로</title><link>https://if1live.github.io/posts/platform-macro/</link><pubDate>Fri, 30 Nov 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/platform-macro/</guid><description>플랫폼 매크로 추가 선언 없이 윈도/iOS/안드로이드 구분하는 매크로</description></item><item><title>C++ namespace 들여쓰기 방지하는 편법</title><link>https://if1live.github.io/posts/namespace-indent/</link><pubDate>Wed, 28 Nov 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/namespace-indent/</guid><description>C++ namespace 들여쓰기 방지하는 편법</description></item><item><title>C++ 다중상속(interface) 관련 삽질 자료</title><link>https://if1live.github.io/posts/cpp-casting/</link><pubDate>Tue, 27 Nov 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/cpp-casting/</guid><description>C++ 다중상속(interface) 관련 삽질 자료</description></item><item><title>생성자,소멸자 강제호출</title><link>https://if1live.github.io/posts/call-ctor-dtor/</link><pubDate>Mon, 26 Nov 2012 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/call-ctor-dtor/</guid><description>개요 성능, 혹은 디버깅을 위해서 커스텀 malloc/free를 쓰는 일이 잇다. 문제는 malloc/free로 사용하면 소멸자/생성자가 호출되지 않기 떄</description></item><item><title>Markdown Syntax Guide</title><link>https://if1live.github.io/posts/markdown-syntax-guide/</link><pubDate>Thu, 11 Mar 2010 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/markdown-syntax-guide/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p></description></item><item><title>Rich Content</title><link>https://if1live.github.io/posts/rich-content/</link><pubDate>Wed, 10 Mar 2010 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/rich-content/</guid><description>&lt;p>Hugo ships with several &lt;a href="https://gohugo.io/content-management/shortcodes/#use-hugos-built-in-shortcodes">Built-in Shortcodes&lt;/a> for rich content, along with a &lt;a href="https://gohugo.io/about/hugo-and-gdpr/">Privacy Config&lt;/a> and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p></description></item><item><title>Placeholder Text</title><link>https://if1live.github.io/posts/placeholder-text/</link><pubDate>Tue, 09 Mar 2010 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/placeholder-text/</guid><description>&lt;p>Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p></description></item><item><title>Math Typesetting</title><link>https://if1live.github.io/posts/math-typesetting/</link><pubDate>Mon, 08 Mar 2010 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/math-typesetting/</guid><description>&lt;p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p></description></item><item><title>Emoji Support</title><link>https://if1live.github.io/posts/emoji-support/</link><pubDate>Fri, 05 Mar 2010 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/emoji-support/</guid><description>&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p></description></item><item><title>Maya Test Page</title><link>https://if1live.github.io/posts/maya-test/</link><pubDate>Sun, 03 Jan 2010 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/maya-test/</guid><description>maya is markdown preprocessor for static site generator.
view embed file.
import json x = json.dumps({ &amp;#39;name&amp;#39;: &amp;#39;maya&amp;#39;, &amp;#39;repo&amp;#39;: &amp;#39;github.com/if1live/maya&amp;#39;, }, indent=2) print(x) embed with line range.
x = json.dumps({ &amp;#39;name&amp;#39;: &amp;#39;maya&amp;#39;, &amp;#39;repo&amp;#39;: &amp;#39;github.com/if1live/maya&amp;#39;, }, indent=2) execute $ python sample.py { &amp;#34;repo&amp;#34;: &amp;#34;github.com/if1live/maya&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;maya&amp;#34; } gist youtube</description></item><item><title>Jupyter Test Page</title><link>https://if1live.github.io/posts/jupyter-test/</link><pubDate>Sat, 02 Jan 2010 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/jupyter-test/</guid><description>Colaboratory에 오신 것을 환영합니다! Colaboratory는 텍스트, 코드, 코드 출력을 하나의 공동작업 문서로 통합해 주는 데이터 분석 도구</description></item><item><title>Markdown Test Page</title><link>https://if1live.github.io/posts/markdown-test/</link><pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate><guid>https://if1live.github.io/posts/markdown-test/</guid><description>markdown syntax h1 heading h2 heading h3 heading h4 heading h5 heading h6 heading normal Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&amp;rsquo;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into</description></item></channel></rss>