---
title: 로그 파일은 좋다
tags: [log file]
slug: log-file-is-good
author: if1live
date: 2019-01-06
url: /posts/log-file-is-good
---

## 개요

예전에 재밌는 버그를 밟은적 있다. 코드는 아래와 같이 굴러갔다.

1.  요청이 들어오면
2.  transaction 시작. 요청이 들어오면 트랜잭션이 시작되도록 프레임웍이 구현되어 있었다.
3.  로그를 DB에 기록
4.  로직을 적절히 수행
5.  transaction 완료. 요청 끝날때 트랜잭션이 끝남

로그를 왜 DB에 기록했는가? 몇가지 이유가 있었다.

하나는 검색이 쉬워서이다.
로그 테이블을 잘 만들고 로그를 잘 저장하면 검색이 쉽다.
아직도 터미널을 쓸 줄 모른느 컴맹이라서 grep 쓰는것보다 SQL이 쉽더라.

웹서버가 여러대였기에 DB를 쓰는게 편했다.
로그를 웹서버 로컬에 각각 기록하면 나중에 로그 파일을 뒤지기 위해 여러대의 웹서버를 열버봐야할텐데 그건 귀찮더라.
DB서버같이 한곳에 모아두면 나중에 검색하는게 쉽다. 

또한 일을 너무 크게 만들고 싶지 않았다.
로그 저장용 서버를 만드는(또는 준비하는) 것도 방법이다.
하지만 이를 위한 작업 자체가 귀찮았다.
DB서버는 이미 있는거니까 할일이 별로 없어서 편했다.

적당히 구현해두니 적당히 돌아가더라.
그러던 어느날, 문제가 발생했다. 
문제는 피할수 없는 것이다. 
이를 위해 로그를 기록해뒀으니 문제를 고치는건 쉬울 것이다. 

...라고 생각하고 로그 테이블을 열어봤는데 문제가 발생한 로그는 하나도 없었다.
이유는 간단하다. 문제 발생시의 흐름을 보자.


1.  요청이 들어오면
2.  transaction 시작
3.  로그를 DB에 기록
4.  로직을 적절히 수행...하다가 펑!
5.  transaction rollback. 아까 기록한 로그를 지움

로그가 롤백 당하다니!!! 멍청하게 구현한 것의 대가를 결국 치뤘다.


## 대응: 트랜잭션과 로그 분리

트랜잭션 안에서 로그 남기는 것을 문제라고 생각한다.
로그 쓰는걸 트랜잭션 밖으로 뺀다.
그러면 트랜잭션이 롤백되어도 로그는 사라지지 않는다. 


## 대응: 별개의 로그 시스템

DB에 로그를 남기는게 문제라고 생각한다.
로그를 DB와 관계 없는 곳에 기록했으면 트랜잭션이 롤백되어도 로그는 남을것이다.


### 원격 로그 서버

원격 로그 서버도 좋은 방법이다.
웹서버가 여러대 있어도 로그 서버에 로그가 집중되니 검색이 편하다.
게다가 별개의 시스템이니 로그가 롤백되는 일도 없다. 하지만 항상 좋다고는 못하겠다.

네트워크 상태, 또는 로그 서버의 상태가 나쁘면 로그가 실종될 수 있다. 

로그를 비동기로 쏘는 경우, 로그가 시간순으로 로그 서버에 도착한다는 보장도 없다.
A, B 순서로 기록했지만 로그 서버에는 B, A 순서로 도착할지 모른다.
그렇다고 로그 작성 순서를 보장하겠다고 로그 작성후 결과가 올때까지 기다리면 기다리느라 서버의 반응 속도 자체가 느려질수 있다.


### 로그 파일

로그파일은 로그 쓰기가 성공한다는게 높은 확률로 보장된다.
(물론 실패할때도 있다. 디스크가 꽉차는 경우는 방법이 없다보니)
반응도 빠르고 시간순으로 작성되도록 구현하는 것도 어렵지 않다.
다만 검색이 귀찮을뿐이다.


### 섞어쓰기

이번에 작업한 프로젝트에서는 원격 로그 서버와 로그 파일을 섞어썼다.
로그 서버는 elasticsearch를 사용했다. 로그는 로컬 파일에도 기록하지만 elasticsearch에도 기록했다.
둘의 장점을 얻을수 있다.

elasticsearch에 이상이 생겨서 로그가 제대로 기록되지 않거나 elasticsearch 서버의 용량 부족으로 옛날 데이터가 날아가면 로그 파일에서 복구할 수 있다. 
로그 검색은 elasticsearch에서 하니까 쉽고 편하더라.

로그 파일을 원본 데이터로 쓰니까 로그 서버는 언제든지 바꿔도 된다. 
새로운 로그 서버로 바꾸고 싶을때는 바꾸고 로그 파일의 데이터를 부어넣으면 잘 돌아갈거다.
로그 파일을 남겨두면 나중에 어떤식으로든지 가공해서 쓸 수 있다. 


## summary

*   롤백 당하지 않는다. 로그는 롤백되면 안되는 정보니까.
*   가공하기 쉽다. 원본 데이터로 쓸 수 있다.
